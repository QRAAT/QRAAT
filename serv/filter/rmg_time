#!/usr/bin/python
# rmg_template
# Template for writing scripts. This program is part of QRAAT, 
# an automated animal tracking system based on GNU Radio. 
#
# Copyright (C) 2013 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import qraat
import time, os, sys
import MySQLdb as mdb
from optparse import OptionParser

parser = OptionParser()

parser.description = '''This does nothing.'''

(options, args) = parser.parse_args()

# Get database credentials.
try: 
  db_config = qraat.csv("%s/db_auth" % os.environ['RMG_SERVER_DIR']).get(view='reader')

except KeyError: 
  print >>sys.stderr, "test: error: undefined environment variables. Try `source rmg_env.`" 
  sys.exit(1) 

except IOError, e: 
  print >>sys.stderr, "test: error: missing DB credential file '%s'." % e.filename
  sys.exit(1)


try: 
  start = time.time()
  print "test: start time:", time.asctime(time.localtime(start))

  # Connect to database. 
  db_con = mdb.connect(db_config.host, 
                       db_config.user,
                       db_config.password,
                       db_config.name)
  
  # cal run
  t_start = 1376420800
  t_end   = 1376442000
  cal_id  = 1
  tx_id   = 51

  cur = db_con.cursor()
  
  # Get pulses in time range.
  cur.execute('''SELECT ID, siteid, timestamp
                   FROM est
                  WHERE timestamp >= %s
                    AND timestamp <= %s
                    AND txid = %s
                  ORDER BY timestamp ASC''', (t_start,
                                              t_end,
                                              tx_id))

  # Do something ... 

except mdb.Error, e:
  print >>sys.stderr, "test: error: [%d] %s" % (e.args[0], e.args[1])
  sys.exit(1)

finally: 
  print "test: finished in %.2f seconds." % (time.time() - start)
