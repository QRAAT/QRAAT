#!/bin/bash
# rmg
# This script is part of the QRAAT system. It provides basic server
# side controls for RMG comptures/receiver running remotely. 
#
# Copyright (C) 2013 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Notes
# 
# Meta data (transmitter file, log files, etc.) is stored persistently on
# disk on the RMG remotes, typically in /home/rmg. Data (.det files, 
# status.txt) is written in memory to ramdisk, typically /tmp/ramdisk/det.
# 
# We make heavy use of SSH. To avoid entering passwords all the time, we 
# use an RSA encryption key with no passphrase. The public key is stored 
# at all RMG remote sites in /home/rmg/.ssh/authorized_keys; the private 
# key is kept at the server, typically /home/rmg/.ssh/rmg_rsa. This is 
# because the remotes run the SSH daemon. 
#
# Tasks 
# 
#  'up/down'
#
# TODO
#
#  'start/stop'
#
# TODO
#
#  'fetch' 
#
# Download pulse data (.det files) from RMG remote to RMG server. Upon 
# success, erase the transfered data from the RMG remote. The pulse detector 
# in the RMG module emits .det files into a directory structure like 
# YYYY/MM/DD/HH/mm/ssuuuuuu.det. We want to be able to copy these files from 
# RMG remotes to the server, but exclude the directory that is being mutated. 
#       One solution would be to implement a hot-directory locking 
# mechanism on the RMG remote side. Since we don't want to burden the site 
# computers with this extra work, we decided to take advantage of the fact 
# that the real clock time must be synchronized across all nodes of the 
# network. We fetch all directories that are older than one minute because 
# the pulse detector will never mutate these directories again. 
#
#  'updatetx' 
#
# Update transmitter information on specified sites. This task includes an
# option to specify a file. 
#
#  'cyclerx'
#
# Cycle the power on the RMG module.  
#
# TODOs 
# 
# - Run task on 'all' sites. 
#
#

function help() {
  cat <<!EOF!
usage: rmg task [-options] {sites}/all  

  This program is part of the QRAAT system. It provides basic controls
  for RMG computers/receivers running in the field. Perform a batch job
  on a list of sites. If 'all' is provided, the job will be dispatched to 
  all up sites.   

  'task' is any one of the following:

    on/off       Switch the field computer's power.

    status       Show status of a site. 

    update       Update a site's configuration information and goal state. 

    up           RMG receiver is unpowered and the detector is stopped. 
                 (Transition to up state.) 

    down         Instruct field computer to shut down in 5 minutes. 
                 (Transition to down state.) 

    start        Power on the RMG receiver and start software defined radio. 
                 Store pulse data remotely. (Transition to active state.)

    stop         Power off the RMG receiver and stop the software defined 
                 radio. (Trnasition to up staqte.)

    fetch        Download pulse data from site to server. Delete downloaded 
                 data from remote machine. 
    
    updatetx --file FILE    Update transmitter file on remote computer. 
                            Defaults to 'tx.csv' in working directory.

    cyclerx      Power off the RMG receiver and power it back on.

    estimate     Process det files into est files from given site.

    help         Print this. 
!EOF!
}

## Get task and options ##
TASK=$1 
shift

if [ ! $TASK ]
then
  help
  exit 0
fi

case $TASK in
 -h|--help|help)
   help
   exit 0
  ;; 

  updatetx)
    if [[ "$1" == "-f" ]] || [[ "$1" == "--file" ]] 
    then
      TX_FILE=$2
      shift
      shift
    else     
      TX_FILE="tx.csv"
    fi
  ;;

  status|update|up|down|start|stop|fetch|cyclerx|estimate)
  ;; 
    
  *)
    echo error: unrecognized task \'$TASK\'
    exit 1
  ;;

esac 

  ## Set up environment ##

source rmg_env  # setup RMG environment variables

SITELIST=$RMG_SERVER_METADATA_DIR/sitelist.csv

## Configuration and status of sites ##
if [ ! -e $SITELIST ]; 
then
  echo "error: site configuration information not available (no sitelist.csv)." 1>&2
  exit 1
fi 


function status() {
  SITE=$1

  read comp_ip power_ip comp_outlet powertype <<< \
   $(rmg_csv --row $SITE comp_ip power_ip comp_outlet powertype <$SITELIST)

  ping $comp_ip -c 1 -w 2 &> /dev/null
  if [ $? -eq 0 ]; then
    echo ok
    read site_status timestamp <<< `ssh -i $RMG_SERVER_SSH_KEYFILE rmg@$comp_ip \
      "rmg_csv --last-row site_status timestamp <$RMG_SITE_METADATA_DIR/status.log"`
    echo $site_status, `date --date @$timestamp`
  
  else
    ping $power_ip -c 1 -w 2 &> /dev/null
    if [ $? -eq 0 ]; then
      
      power_status=$(rmg_powerswitch $powertype $power_ip $comp_outlet QUERY)
      if [ $power_status -eq 1 ]; then

        ping $comp_ip -c 1 -w 2 &> /dev/null
        if [ $? -eq 0 ]; then
          
          echo ok
          read site_status timestamp <<< `ssh -i $RMG_SERVER_SSH_KEYFILE rmg@$comp_ip \
            "rmg_csv --last-row site_status timestamp <$RMG_SITE_METADATA_DIR/status.log"`
          echo $site_status, `date --date @$timestamp`
          
        else 
          echo err_comp
          echo unknown
        fi      

      else 
        echo ok
        echo down
      fi    

    else
      echo err_pwr
      echo unknown
    fi
  fi
}

function update() {
  SITE=$1
  ADDR=$2
  
  rmg_csv --row $SITE <$RMG_SERVER_METADATA_DIR/sitelist.csv >site.csv
  scp -i $RMG_SERVER_SSH_KEYFILE site.csv rmg@$ADDR:$RMG_SITE_METADATA_DIR/site.csv
  ssh -i $RMG_SERVER_SSH_KEYFILE rmg@$ADDR "rmg-node check" 
  rm site.csv

}

function update_sitelist () {
  SITE=$1
  ENTRY=$2
  VALUE=$3
  rmg_csv $SITE $ENTRY $VALUE < $SITELIST > tmp.csv
  mv tmp.csv $SITELIST
}



## Site list ##
SITES=$@


## Run tasks at each site ##
count=0
for SITE in $SITES
do

  read network_status site_status <<< `status $SITE`
  read GOAL ADDR <<< $(rmg_csv --row $SITE state comp_ip <$SITELIST)
  
  if [ $? -ne 0 ]; then 
    echo "error: site '$SITE' not recognized." 1>&2
    exit 1
  fi 

  case $TASK in 
    status)
      echo "status $SITE"
      echo "  network: $network_status"
      echo "  site:    $site_status"
      if [[ "$network_status" == "ok" ]] && [[ "$site_status" != "down" ]]
        then 
          site_goal=`ssh -i $RMG_SERVER_SSH_KEYFILE rmg@$ADDR \
           "rmg_csv --column state <$RMG_SITE_METADATA_DIR/site.csv"`
          [[ "$site_goal" != "$GOAL" ]] && \
           echo "warning: goal state mismatch (serv=$GOAL, node=$site_goal). Suggest update." 1>&2
      fi
    ;;

    update)
      echo "update $SITE"
      if [[ "$network_status" == "ok" ]] && [[ "$site_status" != "down" ]]
        then update $SITE $ADDR
      else 
        echo "error: couldn't update ($network_status, $site_status)" 1>&2
      fi
    ;;

    up)    # * -> up
      echo "up $SITE"
      #update_sitelist $SITE state up
      #if [[ "$network_status" == "err_comp" ]] || \
      #   ( [[ "$network_status" == "ok" ]] && [[ "$site_status" == "down" ]] )
      #  then
      #    read TYPE IP C_OUTLET <<< $(rmg_csv --row $SITE powertype power_ip comp_outlet <$SITELIST)
      #    rmg_powerswitch $TYPE $IP $C_OUTLET CYCLE     
      if [[ "$network_status" == "ok" ]] && [[ "$site_status" != "down" ]]
        then update $SITE $ADDR
      else 
        echo "error: couldn't update ($network_status, $site_status)" 1>&2
      fi
    ;; 

    down)  # * -> down
      echo "down $SITE"
      update_sitelist $SITE state down
      if [[ "$network_status" == "ok" ]] && [[ "$site_status" != "down" ]]
        then update $SITE $ADDR
      else 
        echo "error: couldn't update ($network_status, $site_status)" 1>&2
      fi
    ;;
    
    start) # * -> active 
      echo "start $SITE"
      update_sitelist $SITE state active
      if [[ "$network_status" == "ok" ]] && [[ "$site_status" != "down" ]]
        then update $SITE $ADDR
      else 
        echo "error: couldn't update ($network_status, $site_status)" 1>&2
      fi
    ;;

    stop)  # active -> up
      echo "stop $SITE"
      update_sitelist $SITE state up
      if [[ "$network_status" == "ok" ]] && [[ "$site_status" != "down" ]]
        then update $SITE $ADDR
      else 
        echo "error: couldn't update ($network_status, $site_status)" 1>&2
      fi
    ;;

    fetch)
      echo "fetch $SITE"
      DIRECTORIES_TO_COPY=$(ssh -i $RMG_SERVER_SSH_KEYFILE rmg@$ADDR "cd $RMG_SITE_DET_DIR \
        && find -type d" | rmg_fetch) # directories to copy
      mkdir -p $RMG_SERVER_DET_DIR/$SITE 
      ct=0
      for DIR in $DIRECTORIES_TO_COPY; do
        echo "copying $DIR"
        mkdir -p $RMG_SERVER_DET_DIR/$SITE/$DIR
        rsync -ave "ssh -i $RMG_SERVER_SSH_KEYFILE" rmg@$ADDR:$RMG_SITE_DET_DIR/$DIR/* \
          $RMG_SERVER_DET_DIR/$SITE/$DIR                                        # download to RMG server
        ssh -i $RMG_SERVER_SSH_KEYFILE rmg@$ADDR "rm -r $RMG_SITE_DET_DIR/$DIR" # delete from RMG remote
        let ct=ct+1
      done
      if [ $ct -eq 0 ]; then echo "Nothing to fetch."; fi
    ;;
    
    updatetx) 
      echo "udpatetx $SITE"
      if [ -e $TX_FILE ]
      then
        scp -i $RMG_SERVER_SSH_KEYFILE $TX_FILE rmg@$ADDR:$RMG_SITE_METADATA_DIR/tx.csv 
      else 
        echo "error: '$TX_FILE' doesn't exist" 1>&2
      fi
    ;;
 
    cyclerx)
      echo "cyclerx $SITE" 
      read TYPE IP R_OUTLET <<< $(rmg_csv --row $SITE powertype power_ip rx_outlet <$SITELIST)
      rmg_powerswitch $TYPE $IP $R_OUTLET CYCLE
      if [ $? -ne 0 ]
        then echo "error (powerswitch): couldn't connect with host" 1>&2
      fi
    ;;
    
    estimate)
      echo "estimate $SITE"
      est_processing $RMG_SERVER_DET_DIR/$SITE/ $RMG_SERVER_EST_DIR/$SITE/
    ;;

  esac
  let count=count+1
done


