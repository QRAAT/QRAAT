#!/bin/bash
# rmg-node
# This script is part of the QRAAT system. Control the state of the 
# field computer locally. This provides functionality to transition
# the state immediately, but also could be used as a service to do 
# system monitoring. 'rmg-node check' checks the goal state specified 
# in the local configuration file, e.g. /home/rmg/site.csv, and 
# coerces that state. For example, every minute in crontab: 
# * * * * * /usr/local/bin/rmg-node check
#
# Copyright (C) 2013 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

function help() {
  cat <<!EOF!
usage: rmg-node state/check/help [-options]

  This program is part of the QRAAT system. It controls the field site 
  by transitioning the computer to the specified state.  

  Change the state immediately if a state is given. 'state' is any one 
  of the following:

    active       Computer is powered, RMG receiver is on, and the pulse 
                 detector is running. 

    up           Computer is powered, but RMG receiver is off and the 
                 pulse detector is stopped. 

    down [-d M]  RMG receiver is off, the pulse detector is stopped, and 
                 there is a timer set to shutdown. If such a timer exists
                 and delay is specified, it is reset to M minutes. If one 
                 doesn't exist, an M-minute timer is created (5 minutes 
                 if unspecified.) 

  'check' verifies that the system is in the state specified by site 
  configuration file, usually /home/rmg/site.csv. If not, it immediately 
  performs the transition.

  'help' prints this help. 
!EOF!
}
PATH="/usr/local/bin:$PATH"

## Site configuration ##
source rmg_env                # setup RMG environment variables
SITE=$RMG_SITE_METADATA_DIR/site.csv
STATUS_LOG=$RMG_SITE_METADATA_DIR/status.log

## Get goal state and options ##
GOAL=$1 

if [ ! $GOAL ]
then
  help 
  exit 0 
fi

case $GOAL in
 -h|--help|help)
   help
   exit 0
  ;; 
  
  up|active|do_nothing)
  ;; 

  down)
    shift
    if [[ "$1" == "-d" ]] || [[ "$1" == "--delay" ]] 
    then
      DELAY=$2
      DELAY_SPECIFIED=1
    else     
      DELAY=5
    fi
  ;;

  restart)
    if [ `rmg_csv --column state <$SITE` = 'active' ]
    then
      GOAL='restart'
    else
      echo 'error: Site goal is not set to active'
      exit 1
    fi
  ;;

  check) 
    GOAL=$(rmg_csv --column state <$SITE)
    DELAY=5
  ;;
  
  *)
    echo error: unrecognized state \'$GOAL\'
    exit 1
  ;;

esac 


if [ ! -e $SITE ]
then
  echo "error: site configuration information not available (no site.csv)." 1>&2
  exit 1
fi 

if [ ! -e $STATUS_LOG ]
then
  echo "timestamp,site_status" | cat >> $STATUS_LOG
fi

if [ ! $RETRY_MAX ]
then
  echo "warning: setting max retry count to 10." 1>&2
  export RETRY_MAX=10
fi 


## Collect status information ##
TYPE=$(rmg_csv --column powertype <$SITE)
[[ "$TYPE" == "pingbrother" ]] && invert="--invert=true" 

IP=$(rmg_csv --column power_ip <$SITE)
RX_OUTLET=$(rmg_csv --column rx_outlet <$SITE)

RX_STATE=$(rmg_powerswitch $TYPE $IP $RX_OUTLET QUERY $invert)
if [ $? -ne "0" ]
  then echo "error: foreground pipeline exited unsuccessful"; exit 1; fi 

SDR_PID=$(pgrep rmg_runretry)

PREV_STATUS=$(rmg_csv --column site_status <$STATUS_LOG | tail -1)
PREV_TIME=$(rmg_csv --column timestamp <$STATUS_LOG | tail -1)


## Transition functions ##
function up() {
  if [ $RX_STATE -ne 1 ] && [ ! $SDR_PID ]
    then
      echo "Site is already up"
  else
      if [ $SDR_PID ]                          # Pulse detector stopped
        then 
          kill -SIGTERM $SDR_PID `pgrep run_rmg`
          unset SDR_PID
      fi 
      if [ $RX_STATE -eq 1 ]                   # RMG receiver off
        then 
          rmg_powerswitch $TYPE $IP $RX_OUTLET OFF $invert
          RX_STATE=$(rmg_powerswitch $TYPE $IP $RX_OUTLET QUERY $invert)
      fi
      echo "Site stopped; is now up"
  fi
}

function down() {
  if [ $RX_STATE -ne 1 ] && [ ! $SDR_PID ] 
    then 
      echo "Site set to go down in $(($DELAY * 60)) seconds"
  else 
      if [ $SDR_PID ]                          # Pulse detector stopped
        then
          kill -SIGTERM $SDR_PID `pgrep run_rmg`
          unset SDR_PID
      fi
      if [ $RX_STATE -eq 1 ]                   # RMG receiver off
        then
          rmg_powerswitch $TYPE $IP $RX_OUTLET OFF $invert
          RX_STATE=$(rmg_powerswitch $TYPE $IP $RX_OUTLET QUERY $invert)
      fi 
      echo "Site stopped; set to go down in $(($DELAY * 60)) seconds"
  fi
}

function active() {
   
  if [ $RX_STATE -ne 0 ] && [ $SDR_PID ]
    then 
      echo "Site already running"
    else
      nohup rmg_runretry $TYPE $IP $RX_OUTLET &> /dev/null < /dev/null & 
      SDR_PID=$!
      echo "Site started"
  fi
}


## Execute state transition ##
case $GOAL in

  active)
    STATUS=`active`
  ;; 

  up)
    STATUS=`up`
  ;; 

  down)
    STATUS=`down`
  ;;

  do_nothing)
    STATUS='do_nothing'
  ;;

  restart)
    up
    active
    STATUS='Site restarted'
  ;; 

esac 


## Log new state, shutdown if time has elapsed ## 

TIME=`date -u +%s`
# Timestamp is in seconds after epoch. This makes it easier to 
# calculate the time-elapse. To print the timestamp pretty, do:
# date --date @`rmg_csv -c timestamp <status.log | tail -1`
# Also, GMT is used ('-u'). 
case $STATUS in
  
  *down*)

    # If no delay is specied and the previous status was down, we 
    # need to check if the delay specified by the last status has 
    # elapsed. If so, log the shutdown and power off the system. 
    # If a delay is specified, we need to reset the timer. If a the 
    # previous status was not down, then we need to set a new timer. 

    ## Check if it's time to go down ##
    D=$(echo $PREV_STATUS | grep down | grep -o -e "[0-9]*")
    if [ ! $DELAY_SPECIFIED ] && [ $D ] && [ $PREV_TIME ] && [ $(($TIME - $PREV_TIME)) -gt $D ]
      then
        echo "$TIME,shutdown" | cat >> $STATUS_LOG
        echo "time to shutdown!" 
        sudo poweroff 

    ## reset timer or set a new one ##
    elif [ $DELAY_SPECIFIED ] || [ ! $D ]
      then
        echo "$TIME,$STATUS" | cat >> $STATUS_LOG
    fi
  ;;

  *)

    # All other transitions are handled the same way. 
    # active|up|shutdown|err_*|do_nothing|restarted

    echo "$TIME,$STATUS" | cat >> $STATUS_LOG
  ;;

esac
