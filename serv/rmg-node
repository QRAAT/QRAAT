#!/bin/bash
# rmg-probe
# This script is part of the QRAAT system.
#
# Copyright (C) 2013 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

source rmg_env  # setup RMG environment variables

function help() {
  cat <<!EOF!
usage: rmg-node state/help [-options]

  This program is part of the QRAAT system. It controls the field site 
  by transitioning the computer to the specified state.  

  'state' is any one of the following:

    active       Computer is powered, RMG receiver is on, and the pulse 
                 detector is running. 

    up           Computer is powered, but RMG receiver is off and the 
                 pulse detector is stopped. 

    down [-d M]  RMG receiver is off, the pulse detector is stopped, and 
                 there is a timer set to shutdown. If such a timer exists,
                 its delay is reset to M minutes; otherwise an M-minute 
                 timer is created. M is 5 minutes by default. 

  'help' prints this help. 
!EOF!
}


## Get task and options ##
TASK=$1 

case $TASK in
 -h|--help|help)
   help
   exit 0
  ;; 
  
  up|active)
  ;; 

  down)
    shift
    if [[ "$1" == "-d" ]] || [[ "$1" == "--delay" ]] 
    then
      DELAY=$2
    else     
      DELAY=5
    fi
  ;;
  
  *)
    echo error: unrecognized state \'$TASK\'
    exit 1
  ;;

esac 


## Site configuration ##
SITE=$RMG_SITE_METADATA_DIR/site.csv
STATUS_LOG=$RMG_SITE_METADATA_DIR/status.log
if [ ! -e $SITE ]
then
  echo "error: site configuration information not available (no site.csv)." 1>&2
  exit 1
fi 

if [ ! -e $STATUS_LOG ]
then
  echo "timestamp,site_status" | cat >> $STATUS_LOG
fi

if [ ! $RETRY_CT ] || [ ! $RETRY_MAX ]
then
  echo "warning: setting retry count to zero." 1>&2
  RETRY_CT=0
  RETRY_MAX=10
fi 


## Collect status information ##
TYPE=$(rmg_sitelist --column powertype <$SITE)
IP=$(rmg_sitelist --column power_ip <$SITE)
RX_OUTLET=$(rmg_sitelist --column rx_outlet <$SITE)

RX_STATE=$(rmg_powerswitch $TYPE $IP $RX_OUTLET QUERY)
SDR_PID=$(pgrep run_rmg)
PWR_PID=$(pgrep rmg_shutdown)

PREV_STATUS=$(rmg_sitelist --column site_status <$STATUS_LOG | tail -1)


## Transition functions ##
function up() {
  if [ $RX_STATE -eq 0 ] && [ ! $SDR_PID ] && [ ! $PWR_PID ]
    then
      echo up
  else
      if [ $RX_STATE -ne 0 ]                   # RMG receiver off
        then rmg_powerswitch $TYPE $IP $RX_OUTLET OFF; fi 
      if [ $SDR_PID ]                          # Pulse detector stopped
        then kill -l SIGINT $SDR_PID; fi
      if [ $PWR_PID ]                          # No delayed shutdown
        then killall rmg_shutdown sleep; fi
      echo up
  fi
}

function down() {
  if [ $RX_STATE -eq 0 ] && [ ! $SDR_PID ] && [ $PWR_PID ]
    then 
      echo down
  else 
      if [ $RX_STATE -ne 0 ]                   # RMG receiver off
        then rmg_powerswitch $TYPE $IP $RX_OUTLET OFF; fi 
      if [ $SDR_PID ]                          # Pulse detector stopped
        then kill -l SIGINT $SDR_PID; fi
      if [ ! $PWR_PID ]                        # Delayed shutdown
        then 
          jobs -x rmg_shutdown $DELAY &
          disown %`jobs | grep rmg_shutdown | grep -o -e "[0-9]*" | head -1`
          echo "got here" 1>&2
            # FIXME How to detach a process cleanly from a shell script? 
      fi
      echo down
  fi
}

function active() {
  if [ $RETRY_CT -gt $RETRY_MAX ]
    then 
      if [ $RX_STATE -ne 0 ]                   # RMG receiver off
       then rmg_powerswitch $TYPE $IP $RX_OUTLET OFF; fi 
      if [ $SDR_PID ]                          # Pulse detector stopped
        then kill -l SIGINT $SDR_PID; fi
      if [ $PWR_PID ]                          # No delayed shutdown
        then killall rmg_shutdown sleep; fi
      echo err_fatal
   
  elif [ $RX_STATE -eq 1 ] && [ $SDR_PID ] && [ ! $PWR_PID ]
    then
      let RETRY_CT=0
      echo active
  
  else 
      if [ $RX_STATE -ne 1 ]                   # RMG receiver on
       then rmg_powerswitch $TYPE $IP $RX_OUTLET ON; fi 
      if [ ! $SDR_PID ]                        # Pulse detector running
        then echo "do something!" 1>&2; fi
      if [ $PWR_PID ]                          # No delayed shutdown
        then killall rmg_shutdown sleep; fi
      let RETRY_CT=RETRY_CT+1
      echo err_retry\($RETRY_CT\)
  fi
}


## Execute state transition ##
case $TASK in
  active)
    STATUS=`active`
  ;; 

  up)
    STATUS=`up`
  ;; 

  down)
    STATUS=`down`
  ;;
  
esac 


## Log new state ## 
if [[ "$STATUS" != "$PREV_STATUS" ]]
then
  echo "$(date),$STATUS" | cat >> $STATUS_LOG
fi
