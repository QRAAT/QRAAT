#!/usr/bin/perl
#rmg_plotstatus
#
# This script is part of the QRAAT system.
#
# Copyright (C) 2013 Marcel Losekoot
#
# This script creates a variety of plot images for the web pages, from data in the qraat database:
#	site telemetry such as temperatures and battery voltage
#	runtime stats such as the time offset
#	processing stats such as the number of det and est files
#	...others
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict ;
use warnings ;
use POSIX qw(strftime);
use DBI ;
use DBD::Wire10 ;				# perl -MCPAN -e shell \r install DBD::Wire10
use Time::Local ;				# timegm()
use POSIX ;					# strftime()

my $Debug = 0 ;					# Enable verbose output
my $MovePlots = 1 ;				# Enable the moving of the plots to the WebPath

my $TableNameTelemetry = "telemetry" ;		# Name of the database table that holds telemetry
my $TableNameSitelist = "sitelist" ;		# Name of the database table that holds site list
#my $Interval = 2*86400 ;			# The plot interval, 2*1 day
my $INTERVAL_DAY = 86400 ;			# The interval value for one day
my $TmpPath = "/tmp" ;				# The path of a scratch directory
my $WebPath = "/var/www/images" ;		# The path of the web images directory

sub usage()
{
	print "$0: sitelist authfile [debug]\n" ;
	print "Reads telemetry data from the qraat database for each site listed in the sitelist file, using the database identifined in authfile\n" ;
	print "Writes plot image files\n" ;
}

# Products is an array of hashes to hold definitions for each plot product. One day this array will be read from a config file.
# Each hash contains both simple scalar elements such as plot title and array elements such as yrange (min and max).
# The hash element called lines defines each line in a multi-line plot and is therefore an array with generally one element.
# Each line is defined using a hash containing elements that defined the column number where the data is and the plot line color.
# The line definition's column number refer to the parameters listed in the hash element 'columns', starting at 1.

my @Products =
(
	# Internal temperature of pingbrother
	{
		table=> "telemetry",				# The name of the table in the qraat database that holds the data to be plotted
		columns=> "intemp",				# The column names for the above table that need to be extracted
		file=> "intemp",				# The name used to identify files containing data for this product
		title=> "internal temperature (C)",		# The title at the top of the plot, automatically prefixed with the site name
		yrange=> [0,60],				# An optional array element to manually set limits for the y axis
		timezone=> "localtime",				# The timezone to be used for the x axis, either 'localtime' or 'UTC'
		lines=> [ {column=>1,color=>'orange'} ],	# An array with one element, a hash that defines plot line source data and color
		interval=> 2*$INTERVAL_DAY,			# The time interval in seconds for this plot, defines the start relative to now
	}, 
	# External temperature of pingbrother thermocouple
	{
		table=> "telemetry",
		columns=> "extemp",
		file=> "extemp",
		title=> "external temperature (C)",
		yrange=> [0,60],
		timezone=> "localtime",
		interval=> 2*$INTERVAL_DAY,
	}, 
	# Battery voltage measured at the pingbrother DC input
	{
		table=> "telemetry",
		columns=> "voltage",
		file=> "battery",
		title=> "battery voltage (V)",
		yrange=> [9,15],
		timezone=> "localtime",
		lines=> [ {column=>1,color=>'red'} ],
		interval=> 2*$INTERVAL_DAY,
	}, 
	# Compound plot of both internal and external temperatures
	{
		table=> "telemetry",
		columns=> "intemp,extemp",
		file=> "temps",
		title=> "temperatures (C)",
		yrange=> [0,60],
		timezone=> "localtime",
		lines=>
		[						# Here is an example of a multi-line plot, the lines array contains multiple entries
			{ column=>1,label=>'int',color=>'orange' },	# Each entry is still a hash, hence the { }
			{ column=>2,label=>'ext',color=>'magenta' },	# Each hash may also contain the element 'label', for the plot legend
		],
		interval=> 2*$INTERVAL_DAY,
	}, 
	# Run Level: a status value that reflects both site power and RMG status, ranging from 0 to 5
	{
		table=> "telemetry",
		columns=> "site_status",
		file=> "temps",
		file=> "status",
		title=> "status",
		yrange=> [0,6],
		timezone=> "localtime",
		lines=> [ {column=>1,color=>'black'} ],
		# Here the optional hash element 'gpextra' is used to provide an ad hoc gnuplot command, here used to set the y axis tic labels.
		gpextra=> "set ytics (\"unknown\" 0, \"off\" 1, \"other\" 2, \"down\" 3, \"up\" 4, \"active\" 5 )",
		interval=> 2*$INTERVAL_DAY,
	}, 
	# Time Offset: the number of milliseconds that the site clock differs from its time reference host
	{
		table=> "timecheck",
		columns=> "time_offset",
		file=> "offset",
		title=> "time offset (ms)",
		yrange=> [-100,100],
		timezone=> "localtime",
		lines=> [ {column=>1,color=>'blue'} ],
		interval=> 2*$INTERVAL_DAY,
	}, 
	# Server det file count: the number of det files at the server
	{
		table=> "detcount",
		columns=> "server",
		file=> "server_det_count",
		title=> "server det count",
		yrange=> [1,1000],
		timezone=> "localtime",
		gpextra=> "set logscale y",
		interval=> 2*$INTERVAL_DAY,
	}, 
	# Site det file count: the number of det files at the site
	{
		table=> "detcount",
		columns=> "site",
		file=> "site_det_count",
		title=> "site det count",
		yrange=> [1,1000],
		timezone=> "localtime",
		lines=> [ {column=>1,color=>'red'} ],
		interval=> 2*$INTERVAL_DAY,
	}, 
	# Database est entries per site
	{
		table=> "procount",
		columns=> "estserver",
		file=> "server_est_count",
		title=> "est files read per 10 minutes",
		yrange=> [1,1000],
		timezone=> "localtime",
		gpextra=> "set logscale y",
		interval=> 2*$INTERVAL_DAY,
	}, 
	# Database fest entries per site
	{
		table=> "procount",
		columns=> "festserver",
		file=> "server_fest_count",
		title=> "filtered est entries per 10 minutes",
		yrange=> [1,1000],
		timezone=> "localtime",
		lines=> [ {column=>1,color=>'red'} ],
		gpextra=> "set logscale y",
		interval=> 2*$INTERVAL_DAY,
	}, 
	# Database fest power vs time
	{
		table=> "fest",
		columns=> "fdsp",
		file=> "fest_power_time",
		title=> "filtered est power",
		yrange=> [0.01,1000],
		timezone=> "localtime",
		lines=> [ {column=>1,color=>'red'} ],
		gpextra=> "set logscale y",
		interval=> $INTERVAL_DAY,
	}, 
	# Database fest freq vs time
	{
		table=> "fest",
		columns=> "frequency",
		file=> "fest_frequency_time",
		title=> "filtered est frequency timeline",
		yrange=> [164000000,164500000],
		timezone=> "localtime",
		lines=> [ {column=>1,color=>'black'} ],
		interval=> $INTERVAL_DAY,
		size=> [600,1200],					# Here the optional hash element 'size' is used to override the default
		gpextra=> "set format y \"%s\"; set ytics 10000",
	}, 
) ;

sub main()
{
	my $argc = scalar @ARGV ;
	if( $argc < 2 )
	{
		usage() ;
		return 1 ;
	}
	if( ($argc > 2) && ($ARGV[2] eq "debug") )
	{
		$Debug = 1 ;
	}
	my $sitelist = $ARGV[0] ;
	print "Reading sitelist from '$sitelist'\n" ;
	my @data = readcsv($sitelist) ;
	shift @data ;	# discard header line
	if( scalar @data < 1 )
	{
		print "ERROR: cannot read sitelist\n" ;
		return 1 ;
	}
	my $authfile = $ARGV[1] ;
	my $dbh = opendatabase($authfile) ;
	if( not defined $dbh )
	{
		#print "ERROR: cannot open database defined in authfile '$authfile'\n" ;
		# opendatabase() already explains the error
		return 1 ;
	}
	for my $ref_row ( @data )
	{
		my $site = $ref_row->[0] ;
		if( (not defined $site) or ($site eq "") ) { next ; }
		for my $product ( @Products )
		{
			my $table = $product->{table} ;
			my $columns = $product->{columns} ;
			my $timezone = $product->{timezone} ;
			my $interval = $product->{interval} ;
			my $result = writecsv($site,$dbh,$table,$columns,$timezone,$interval) ;
			if( $result ) { next ; }
			make($site,$dbh,$product) ;
		}
	}	
	closedatabase($dbh) ;
	return 0 ;
}

sub make($$$)
{
	my ( $site,$dbh,$refhash ) = @_ ;
	my $file = $refhash->{file} ;
	my $title = $refhash->{title} ;
	print "Creating plot for $site: $title\n" ;
	my $err = writegp($site,$refhash) ;
	if( $err ) { print "Error writing gp file: $err\n" ; }
	$err = makeplot($site,$file) ;
	if( $err ) { print "Error making make: $err\n" ; }
	$err = moveplot($site,$file) ;	# move the plot from the TmpPath to the WebPath
	if( $err ) { print "Error moving plot: $err\n" ; }
}

sub writecsv($$$$$)
{
	my ( $sitename, $dbh, $tablename, $columns, $display_timezone, $interval ) = @_ ;
	if( not defined $dbh ) { return 1 ; }
	# Get the site number from the sitename table
	my $query = "select id from $TableNameSitelist where name='${sitename}' ;" ;
	if( $Debug ) { print "debug: writecsv: query=$query\n" ; }
	my $result = dblookup($dbh,$query) ;
	if( not defined $result or ($result eq "") )
	{
		if( $Debug ) { print "debug: writecsv: cannot find site code for site '$sitename'\n" ; }
		return 1 ;
	}
	my $site = $result ;
	my $timenow = time() ;
	my $dtstart = strftime "%Y-%m-%d %H:%M:%S", gmtime($timenow-$interval);
	my $dtstop = strftime "%Y-%m-%d %H:%M:%S", gmtime($timenow);
	$query = "select count(id) from $tablename where siteid = $site and datetime between \"$dtstart\" and \"$dtstop\";" ;
	if( $Debug ) { print "debug: writecsv: query=$query\n" ; }
	my $count = dblookup($dbh,$query) ;
	if( not defined $count )
	{
		print "ERROR: query returned no results\n" ;
		return 1 ;
	}
	if( $Debug ) { print "debug: writecsv: query result has $count rows\n" ; }
	if( $count < 2 ) { return 1 ; }
	my $filename = "$TmpPath/${sitename}_${tablename}.csv" ;
	my $fd ;
	if( not defined open($fd,">".$filename) )
	{
		print "ERROR: cannot write to csv file '$filename'\n" ;
		return 1 ;
	}
	$query = "select datetime,timezone,$columns from $tablename where siteid = $site and datetime between \"$dtstart\" and \"$dtstop\";" ;
	my @data = dbdata($dbh,$query) ;
	$count = scalar @data ;
	if( $Debug ) { print "debug: writecsv: query result has $count rows\n" ; }
	if( $count > 0 )
	{
		for my $refrow ( @data )
		{
			if( not defined $refrow ) { last ; }
			my @row = @$refrow ;
			#shift @row ;	# drop the ID column
			#shift @row ;	# drop the siteid column
			my $dt = shift @row ;
			if( not defined $dt ) { next ; }
			my $data_timezone = shift @row ;
			my $new_timezone ;
			( $dt, $new_timezone ) = tzconvert($dt,$data_timezone,$display_timezone) ;
			print $fd "$dt" ;
			print $fd ",$new_timezone" ;
			for my $column ( @row )
			{
				if( not defined $column ) { $column = "" ; }
				print $fd ",$column" ;
			}
			print $fd "\n" ;
		}
	}
	close($fd) ;
	return 0 ;
}

sub tzconvert($$$)	# convert datetime string 'YYYY-MM-DD HH:mm:ss' between timezones 'localtime', 'UTC', 'GMT' or sources '[-]HHMM'
{
	my ( $source_dt, $source_tz, $target_tz ) = @_ ;
	my ( $year, $mon, $day, $hour, $min, $sec ) = ($source_dt =~ m/^(\d{4})-(\d{2})-(\d{2})\s?(\d{2}):(\d{2}):(\d{2})$/) ;
	$year -= 1900 ;
	$mon-- ;
	my $gmt ;	# here's the goal: get the time in gmt seconds for the given time in the given timezone
	if( $source_tz eq "localtime" )
	{
		$gmt = timelocal($sec,$min,$hour,$day,$mon,$year) ;	# convert the time to gmt seconds for an unidentfied timezone (bad, bad)
	}
	else
	{
		$gmt = timegm($sec,$min,$hour,$day,$mon,$year) ;	# convert the time to gmt seconds for a gmt source timezone
		my $offset = 0 ;	# work out the correction between the given timezone and gmt, to correct the gmt value above
		my ( $sign, $hours, $minutes ) = ( $source_tz =~ /(-|\+)?(\d{2})(\d{2})/ ) ;
		if( (defined $hours) and (defined $minutes) )
		{
			$offset = $hours*3600 + $minutes*60 ;
			if( defined $sign and $sign eq "-" )
			{
				$offset = -$offset ;
			}
		}
		$gmt -= $offset ;		# yes, subtract the offset from the seconds value to make it gmt
	}
	# So now gmt holds the time in seconds in gmt
	# Now convert it back into a datetime string and a timezone string
	my ( $wday, $yday, $isdst ) ;
	my @tm ;
	if( ($target_tz eq "UTC") or ($target_tz eq "GMT") )
	{
		@tm = gmtime($gmt) ;
	}
	else
	{
		@tm = localtime($gmt) ;
	}
	#
	# Fixup tm and make target_dt
	#$tm[5] += 1900 ;	# year
	#$tm[4]++ ;		# month
	my $target_dt = strftime "%Y-%m-%d %H:%M:%S",@tm ;
	#
	# Fixup target_tz
	if( $target_tz eq "localtime" )
	{
		$target_tz = strftime "%Z",localtime($gmt) ;	# seems you must call localtime() to have %Z set
	}
	return ( $target_dt, $target_tz ) ;
}

sub readcsv($)
{
	my ( $filename ) = @_ ;
	my $fd ;
	if( not defined open($fd,"<".$filename) )
	{
		print "ERROR: cannot open file '$filename'" ;
		return undef ;
	}
	my @data = () ;
	my $line ;
	while( $line = <$fd> )
	{
		chomp($line) ;
		my @argv = split(',',$line) ;
		push @data, [ @argv ] ;	# create an array of references to an array 
	}
	close($fd) ;
	return @data ;
}

my @GnuplotCommands =
(
	"set terminal png size 600,300 truecolor nocrop enhanced",
	"set datafile separator \",\"",
	"set datafile missing \"NULL\"",
	"set xdata time",
	"set timefmt \"%Y-%m-%d %H:%M:%S\"",
	#set format x "%H:%M\n%m/%d"",
	#"set format x \"%l %p\\n%m/%d\"",
	"set format x \"%l %p\\n%d\"",
	"set grid",
	"set lmargin 11",
	"set xtics out nomirror",
	"#"
) ;

sub writegp($$)
{
	my ( $site, $refhash ) = @_ ;			# a reference to a hash containing all other parameters
	my $filename = "${site}_$refhash->{file}" ;
	my $columns = $refhash->{columns} ;	# Not sure we need this one here
	my $refyrange = $refhash->{yrange} ;	# a reference to an array of 2 vales for y axis range (optional)
	my $ymin = $refyrange->[0] ;
	my $ymax = $refyrange->[1] ;
	my $refsize = $refhash->{size} ;	# a reference to an array of 2 vales for plot x and y size (optional)
	my $xsize = $refsize->[0] ;
	my $ysize = $refsize->[1] ;
	my $timezone = $refhash->{timezone} ;	# a sting with either UTC or localtime
	my $reflines = $refhash->{lines} ;	# a reference to an array of line definition hashes
	my $tablename = $refhash->{table} ;
	my $title = "$site $refhash->{title}" ;
	my $interval = $refhash->{interval} ;
	my $gpextra = $refhash->{gpextra} ; # (optional)
	if( not defined $gpextra ) { $gpextra = "" ; }
	my $csvfilename = "$TmpPath/${site}_${tablename}.csv" ;
	my $gpfilename = "$TmpPath/$filename.gp" ;
	my $pngfilename = "$TmpPath/$filename.png" ;
	my $gp ;
	if( not defined open($gp,">".$gpfilename) )
	{
		print "ERROR: cannot write to file '$gpfilename'\n" ;
		return 1 ;
	}
	my $timenow = time() ;
	# By default, assume localtime for the plot time axis
	my $dtstart = strftime "%Y-%m-%d %H:%M:%S", localtime($timenow-$interval);
	my $dtstop = strftime "%Y-%m-%d %H:%M:%S", localtime($timenow);
	if( $timezone eq "UTC" )
	{
		$dtstart = strftime "%Y-%m-%d %H:%M:%S", gmtime($timenow-$interval);
		$dtstop = strftime "%Y-%m-%d %H:%M:%S", gmtime($timenow);
	}
	for my $line ( @GnuplotCommands )
	{
		print $gp "$line\n" ;
	}
	print $gp "set output \"$pngfilename\"\n" ;
	print $gp "set title \"$title\"\n" ;
	if( defined $ymin and defined $ymax )
	{
		print $gp "set yrange [$ymin:$ymax]\n" ;
	}
	if( defined $xsize and defined $ysize )
	{
		print $gp "set terminal png size $xsize,$ysize truecolor nocrop enhanced\n" ;
	}
	print $gp "set xrange [\"$dtstart\":\"$dtstop\"]\n" ;
	print $gp "$gpextra\n" ;
	# Assemble the plot command, possibly for multiple lines per plot. Always start with "plot"
	my $command = "plot \"$csvfilename\"" ;
	#my @lines = @$reflines ;
	for my $refline ( @$reflines )
	{
		#my %line = %$refline ;
		my $column = $refline->{column} ;
		$column += 2 ;	# prefix datetime and timezone
		my $label = $refline->{label} ;
		if( not defined $label ) { $label = "" ; }
		my $color = $refline->{color} ;
		if( not defined $color ) { $color = "" ; }
		if( $color eq "" ) { $color = "red" ; }
		print $gp "${command} using 1:(\$$column>$ymax?$ymax:\$$column<$ymin?$ymin:\$$column) with points pointtype 7 pointsize 0.5 linecolor rgb \"$color\" title \"$label\"" ;
		$command = ", \"\"" ;	# for multiple lines per plot, omit plot and use ', ""'
	}
	print $gp "\n\n" ;
	close($gp) ;
	return 0 ;
}

sub makeplot($$)
{
	my ( $site, $filename ) = @_ ;
	my $gpfilename = "$TmpPath/${site}_$filename.gp" ;
	my $logfilename = "$TmpPath/${site}_$filename.log" ;
	my $command = "/usr/bin/gnuplot $gpfilename &>$logfilename" ;
	if( $Debug ) { print "debug: makeplot: command=$command\n" ; }
	my $result = `$command` ;
	if( $Debug ) { print "debug: makeplot: result=$result\n" ; }
	return 0 ;
}

sub moveplot($$)
{
	my ( $site, $filename ) = @_ ;
	my $source = "$TmpPath/${site}_$filename.png" ;
	if( not -e $source )
	{
		print "Source file '$source' does not exist\n" ;
		return 1 ;
	}
	if( not -f $source )
	{
		print "Source '$source' is not a file\n" ;
		return 1 ;
	}
	if( -z $source )
	{
		print "Source file '$source' is empty\n" ;
		return 1 ;
	}
	my $command = "/bin/cp --verbose --force --no-dereference --remove-destination $source $WebPath" ;
	if( $Debug ) { print "debug: moveplot: command=$command\n" ; }
	my $result = "" ;
	if( $MovePlots )
	{
		$result = `$command` ;
	}
	else
	{
		print "WARNING: move plots disabled\n" ;
	}
	if( $Debug ) { print "debug: moveplot: result=$result\n" ; }
	return 0 ;
}

sub opendatabase($)	# connects to the database and returns the database handle
{
	my ( $authfile ) = @_ ;
	my $fd ;
	if( not defined open($fd,"<".$authfile) )
	{
		print "ERROR: cannot open authfile '$authfile'\n" ;
		return undef ;
	}
	my $host = <$fd> ;
	chomp($host) ;
	my $user = <$fd> ;
	chomp($user) ;
	my $pass = <$fd> ;
	chomp($pass) ;
	my $database = <$fd> ;
	chomp($database) ;
	if( not defined $user or $user eq "" )
	{
		print "ERROR: cannot read user from authfile '$authfile'\n" ;
		return undef ;
	}
	if( not defined $pass or $pass eq "")
	{
		print "ERROR: cannot read pass from authfile '$authfile'\n" ;
		return undef ;
	}
	if( not defined $host or $host eq "" )
	{
		print "ERROR: cannot read host from authfile '$authfile'\n" ;
		return undef ;
	}
	if( not defined $database or $database eq "" )
	{
		print "ERROR: cannot read database from authfile '$authfile'\n" ;
		return undef ;
	}
	close($fd) ;
	my $port = 3306 ;
	my $timeout = 10 ;
	#my $dsn = "dbi:mysql:$database" ;
	my $dsn = "DBI:Wire10:database=$database;host=$host;port=$port;mysql_connect_timeout=$timeout" ;
	my $dbh = DBI->connect($dsn,$user,$pass) ;
	if( not $dbh )
	{
		print "ERROR: cannot connect to database host: $DBI::errstr\n" ;
		return undef ;
	}
	return $dbh ;
}

sub dblookup($$)
{
	#
	# Executes the given query to return one value, or undef
	my ( $dbh, $query ) = @_ ;
	my $sth = $dbh->prepare($query) ;
	if( not $sth )
	{
		print "ERROR: cannot prepare query: $DBI::errstr Query='$query'\n" ;
		return undef ;
	}
	if( not $sth->execute() )
	{
		print "ERROR: cannot execute query: $DBI::errstr Query='$query'\n" ;
		return undef ;
	}
	my $matches = $sth->rows() ;
	if( not $matches )
	{
		return undef ;
	}
	my $ref_row = $sth->fetchrow_arrayref ;
	if( not defined($ref_row) )
	{
		return undef ;
	}
	return $ref_row->[0] ;
}

sub dbexecute($$)		# executes a given query, returns 0 for OK, 1 for error
{
	my ( $dbh, $query ) = @_ ;
	my $sth = $dbh->prepare($query) ;
	if( not $sth )
	{
		print "ERROR: cannot prepare query: $DBI::errstr Query='$query'\n" ;
		return 1 ;
	}
	if( not $sth->execute() )
	{
		print "ERROR: cannot execute query: $DBI::errstr Query='$query'\n" ;
		return 1 ;
	}
	return 0 ;
}

sub dbdata($$)		# generic database read function, returns an array of data resulting from the given query
{
	my ( $dbh, $query ) = @_ ;
	if( $Debug ) { print "debug: dbdata\n" ; }
	my $sth = $dbh->prepare($query) ;
	if( not $sth )
	{
		print "ERROR: cannot prepare query: $DBI::errstr Query='$query'\n" ;
		return 1 ;
	}
	if( not $sth->execute() )
	{
		print "ERROR: cannot execute query: $DBI::errstr Query='$query'\n" ;
		return 1 ;
	}
	my $matches = $sth->rows() ;
	if( $matches == 0 )
	{
		if( $Debug ) { print "debug: dbdata: no matches\n" ; }
		$sth->finish() ;
		return 1 ;
	}
	my $ref_row ;
	my @data = () ;
	while( my $ref_row = $sth->fetchrow_arrayref() )
	{
		if( defined($ref_row) )
		{
			if( defined($ref_row->[0]) )
			{
				push @data, [ @$ref_row ] ;
			}
		}
	}
	$sth->finish() ;
	return @data ;
}

sub closedatabase($)
{
	my ( $dbh ) = @_ ;
	if( not $dbh->disconnect() )
	{
		print "ERROR: cannot close database: $DBI::errstr\n" ;
	}
}

exit main() ;

#END
