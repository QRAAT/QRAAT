#!/bin/bash
# 
# Chris ~9 April 2013
# rmg_powerswitch
# Site-specific power management stuff.
# 

TYPE=$1
IP=$2
OUTLET=$3
OP=$4
invert=$5

function die() {
  echo "usage: powerswitch <power_type> <IP_addr> <outlet> {ON, OFF, CYCLE, QUERY} [--invert={true,false}]" 1>&2
  exit 1
}

if [ ! $OP ]
then
  die
fi 

# Invert switch. 
# A device can be plugged into the Pingbrother relay either on normally open (NO) or 
# normally closed (NC). The field computer will be attached to normally closed and the 
# RMG receiver to normally opened. For this reason, it's necessary to invert the signal
# for the receiver. This can be specified on the command line.  

ON=1
OFF=0

[ $invert ] && case $invert in
  
  --invert=*)
    read dummy inversion <<< $(echo $invert | tr "=" "\n")
    case $inversion in 
      true) 
        ON=0
        OFF=1
      ;;

      false)
      ;;

      *) 
        die
      ;;
    esac
  ;;
  
  *)
    die
  ;;

esac

function nil {
  # No power switching. 

  case $OP in 

    ON|OFF)
      echo "warning (powerswitch): power switching not available." 1>&2
    ;; 

    CYCLE) 
      echo "warning (powerswitch): power switching not available. Waiting 2 minutes instead." 1>&2
      sleep 120
    ;;
  esac 
}



function pingbrother {
  # This is net booter we ordered from New Zealand. This is the best choice
  # because it provides 12 V DC, is essentially a dummy router, does power 
  # monitoring, etc. 

  case $OP in

    ON) 
      curl -u admin:admin "http://$IP/protect/PBmanual.htm?Relay$OUTLET=$ON" &> /dev/null
    ;; 

    OFF)
      curl -u admin:admin "http://$IP/protect/PBmanual.htm?Relay$OUTLET=$OFF" &> /dev/null
    ;;

    CYCLE) 
      echo "powerswitch: wait about 3 seconds for power to cycle." 1>&2
      curl -u admin:admin "http://$IP/protect/PBmanual.htm?Relay$OUTLET=$OFF" &> /dev/null && \
      sleep 2 && \
      curl -u admin:admin "http://$IP/protect/PBmanual.htm?Relay$OUTLET=$ON" &> /dev/null
   ;;

  esac
  echo $? 
}

function pb_query {
  # Get status of PingBrother relays. Unfortunately we have to parse HTML.
  # Luckily this is relatively simple with Python! 

  curl -u admin:admin "http://$IP/protect/PBmanual.htm" 2> /dev/null | \
  python -c "
from HTMLParser import HTMLParser
import sys

class PBRelayStatus(HTMLParser): 

  relay = None
  state = None
  relays = {}

  def handle_starttag(self, tag, attrs): 
    if tag == 'select': 
      for (attr, value) in attrs:
        if attr == 'name':
          self.relay = value[5:] # 'Relay'

    elif tag == 'option' and self.relay:
      for (attr, value) in attrs: 
        if attr == 'value': 
          self.state = value
        elif attr == 'selected': 
          self.relays[self.relay] = self.state

  def handle_endtag(self, tag):
    if tag == 'select': 
      self.relay = None

    elif tag == 'option' and self.relay:
      self.state = None

  def handle_data(self, data):
    pass

parser = PBRelayStatus()
parser.feed(sys.stdin.read())
print parser.relays['$OUTLET']
"
}

function webpowerswitch {
  # This is the big, clunky network addressible power supply that Marcel 
  # modified. It now supplies 12 V DC to 10 outlets. It's not easily 
  # scripted via telnet, so here we use curl. 
  case $OP in

    ON|OFF) 
    ;; 

    CYCLE) 
      OP="CCL"
      echo "powerswitch: wait about 15 seconds for power to cycle." 1>&2

    ;;
   
  esac
  
  curl --user admin:1234 "http://$IP/outlet?$OUTLET=$OP" > /dev/null
  echo $? 

}

function netbooter {
  # This is the nicer one. It has  just two outlets. Here we script it with 
  # telnet. It seems a little cludgy, but the alternative, using curl, means 
  # we can only toggle the  power switch. This might be OK, but it would also 
  # be nice to know its off when we've sent the command. Telnet session ends
  # with a goodbye message. 
  
  case $OP in

    ON)
      (sleep 1; echo -ne "pset $OUTLET 1\r\nlogout\r\n"; sleep 1) \
        | telnet $IP 2> /dev/null \
        | grep -e 'Goodbye!' &> /dev/null
      echo $? 
    ;; 

    OFF)
      (sleep 1; echo -ne "pset $OUTLET 0\r\nlogout\r\n"; sleep 1) \
        | telnet $IP 2> /dev/null \
        | grep -e 'Goodbye!' &> /dev/null
      echo $? 
    ;;

    CYCLE) 
      echo "powerswitch: wait about 6 seconds for power to cycle." 1>&2
      (sleep 1; echo -ne "rb $OUTLET\r\nlogout\r\n"; sleep 5) \
        | telnet $IP 2> /dev/null \
        | grep -e 'Goodbye!' &> /dev/null
      echo $?
    ;;
    
  esac
 
}


    ## Execute power script ## 

case $OP in 
  
  QUERY) 
    
    case $TYPE in 

      nil) 
        echo 1 # Just assume device is powered. 
      ;;
      
      pingbrother)
        q=`pb_query`
        if [ $q -eq 0 ] && [ $ON -eq 0 ]
          then echo 1
        elif [ $q -eq 1 ] && [ $ON -eq 0 ]
          then echo 0
        else
          echo $q
        fi
      ;;

      *)
        echo "error (powerswitch): QUERY not implemented for $TYPE!" 1>&2
        exit 1

    esac

  ;;
  
  ON|OFF|CYCLE)

    case $TYPE in
     
      nil) 
        exit $(nil)
      ;;

      pingbrother)
        exit $(pingbrother)
      ;;
      
      webpowerswitch) 
        exit $(webpowerswitch)
      ;;

      netbooter)
        exit $(netbooter)
      ;;

      *)
        echo "error (powerswitch): '$TYPE' is not a valid power type." 1>&2
        exit 1

    esac

  ;;
      
  *)
    echo "error (powerswitch): '$OP' is not a valid operation." 1>&2
    exit 1

esac
