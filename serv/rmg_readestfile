#!/usr/bin/perl
#read_est.pl
#
# Reads est csv files and updates a database
#
# Usage: $0 filename sitename authfile
#
# Created 2013 06 10 ML. Based on readstats.pl for buoy data
#
use strict ;
use warnings ;
use DBI ;
#use DBD::mysql ;
use DBD::Wire10 ;				# perl -MCPAN -e shell \r install DBD::Wire10

my $Debug = 0 ;					# Set to 1 for debug output, 0 to silence
my $TableNameEST = "est" ;			# The name of the db table
my $TableNameSitelist = "sitelist" ;		# The name of the db table

sub usage() ;
sub main() ;
sub process($) ;
sub initdatabase($$$) ;
sub createtables($$) ;
sub dbexecute($$) ;
sub dblookup($$) ;
sub updatedatabase($$$) ;
sub opendatabase($) ;

sub usage()
{
	print "Usage: $0 filename sitename authfile\n" ;
	print "\tfilename is the csv file with the est data\n" ;
	print "\tsitename is the name of the site that produced the est (det) file\n" ;
	print "\tauthfile is the name of the file containing the mysql account credentials\n" ;
}

sub main()
{
	my $argc = scalar @ARGV ;
	if( $argc != 3 )
	{
		usage() ;
		return 1 ;
	}
	my $err = process(\@ARGV) ;
	return $err ;
}

sub process($)
{
	my ( $refargs ) = @_ ;
	my @args = @$refargs ;
	my $csvfilename = $args[0] ;
	my $sitename = $args[1] ;
	my $authfile = $args[2] ;
	if( $Debug )
	{
		print "csvfilename=$csvfilename\n" ;
		print "sitename=$sitename\n" ;
		print "authfile=$authfile\n" ;
	}
	if( not -e $authfile )
	{
		print "Cannot find authfile '$authfile'\n" ;
		return 1;
	}
	print "Processing csv file '$csvfilename'\n" ;
	updatedatabase($csvfilename,$sitename,$authfile) ;
	return 0 ;
}

sub dbexecute($$)		# executes a given query, returns 0 for OK, 1 for error
{
	my ( $dbh, $query ) = @_ ;
	my $sth = $dbh->prepare($query) ;
	if( not $sth )
	{
		print "ERROR: cannot prepare query: $DBI::errstr Query='$query'\n" ;
		return 1 ;
	}
	if( not $sth->execute() )
	{
		print "ERROR: cannot execute query: $DBI::errstr Query='$query'\n" ;
		return 1 ;
	}
	return 0 ;
}

sub dblookup($$)
{
	#
	# Executes the given query to return one value, or undef
	my ( $dbh, $query ) = @_ ;
	my $sth = $dbh->prepare($query) ;
	if( not $sth )
	{
		print "ERROR: cannot prepare query: $DBI::errstr Query='$query'\n" ;
		return undef ;
	}
	if( not $sth->execute() )
	{
		print "ERROR: cannot execute query: $DBI::errstr Query='$query'\n" ;
		return undef ;
	}
	my $matches = $sth->rows() ;
	if( not $matches )
	{
		return undef ;
	}
	my $ref_row = $sth->fetchrow_arrayref ;
	if( not defined($ref_row) )
	{
		return undef ;
	}
	return $ref_row->[0] ;
}

sub readstatsfile($)	# Reads a CSV file of stats data and creates a hash of it, returns a reference to the hash, or undef
{
	my ( $filename ) = @_ ;
	if( $Debug ) { print "debug: readstatsfile: start\n" ; }
	if( not defined($filename) ) { return undef } ;
	my $fd ;
	if( not defined open($fd,"<".$filename) )
	{
		print "ERROR: cannot open data file '$filename'\n" ;
		return undef ;
	}
	my @data = () ;
	my $line ;
	my $linecount = 0 ;
	while( $line = <$fd> )
	{
		$linecount++ ;
		chomp($line) ;
		my @args = split /,\s*/,$line ;
		my $argc = scalar @args ;
		if( $argc < 2 )	# 2013-05-31 20:57:04, 1370033824.115382, 164022933, 164020000, 1.824834e-01, ...
		{
			if( $Debug ) { print "debug: readstatsfile: too few args: $argc on line $linecount: $line\n" ; }
			next ;
		}
		my $datetime = $args[0] ;
		if( $datetime =~ /Date/ )
		{
			if( $Debug ) { print "debug: readstatsfile: header line\n" ; }
			next ;
		}
		if( length($datetime) != 19 )
		{
			if( $Debug ) { print "debug: readstatsfile: bad datetime: $datetime on line $linecount: $line\n" ; }
			next ;
		}
		#
		push @data, [ @args ] ;	# Add an array entry to @data that contains a reference to the args array
		if( $Debug ) { print "debug: readstatsfile: read $argc values from line $linecount\n" ; }
	}
	close($fd) ;
	if( $Debug ) { print "debug: readstatsfile: finish\n" ; }
	return \@data ;
}

sub updatedatabase($$$)
{
	my ( $csvfilename, $sitename, $authfile ) = @_ ;
	if( $Debug ) { print "debug: updatedatabase: start\n" ; }
	my $dbh = opendatabase($authfile) ;
	if( not defined $dbh ) { return 1 ; }
	if( $Debug ) { print "debug: updatedatabase: opendatabase OK\n" ; }
	#
	my $result = updatetable($dbh,$TableNameEST,$sitename,$csvfilename) ;
	closedatabase($dbh) ;
	if( $result )
	{
		return 1 ;
	}
	if( $Debug ) { print "debug: updatedatabase: finish\n" ; }
	return 0 ;
}

sub updatetable($$$$)
{
	my ( $dbh, $tablename, $sitename, $csvfilename ) = @_ ;
	if( $Debug ) { print "debug: updatetable: start\n" ; }
	#
	# Read all available data from the csv file
	my $stats = readstatsfile($csvfilename) ;
	if( not defined($stats) )
	{
		if( $Debug ) { print "debug: updatetable: error reading from file '$csvfilename'\n" ; }
		return 1 ;
	}
	my $howmany = scalar @$stats ;
	if( $howmany < 1 )
	{
		if( $Debug ) { print "debug: updatetable: no data read from file '$csvfilename'\n" ; }
		return 1 ;
	}
	#
	my $result = writetable($dbh,$tablename,$sitename,$stats) ;
	if( $result )
	{
		if( $Debug ) { print "debug: updatetable: error updating the table '$tablename'\n" ; }
		return 1 ;
	}
	if( $Debug ) { print "debug: updatetable: finish\n" ; }
	return 0 ;
}

sub opendatabase($)	# connects to the database and returns the database handle
{
	my ( $authfile ) = @_ ;
	my $fd ;
	if( not defined open($fd,"<".$authfile) )
	{
		print "ERROR: cannot open authfile '$authfile'\n" ;
		return undef ;
	}
	my $host = <$fd> ;
	chomp($host) ;
	my $user = <$fd> ;
	chomp($user) ;
	my $pass = <$fd> ;
	chomp($pass) ;
	my $database = <$fd> ;
	chomp($database) ;
	if( not defined $user or $user eq "" )
	{
		print "ERROR: cannot read user from authfile '$authfile'\n" ;
		return undef ;
	}
	if( not defined $pass or $pass eq "")
	{
		print "ERROR: cannot read pass from authfile '$authfile'\n" ;
		return undef ;
	}
	if( not defined $host or $host eq "" )
	{
		print "ERROR: cannot read host from authfile '$authfile'\n" ;
		return undef ;
	}
	if( not defined $database or $database eq "" )
	{
		print "ERROR: cannot read database from authfile '$authfile'\n" ;
		return undef ;
	}
	close($fd) ;
	my $port = 3306 ;
	my $timeout = 10 ;
	#my $dsn = "dbi:mysql:$database" ;
	my $dsn = "DBI:Wire10:database=$database;host=$host;port=$port;mysql_connect_timeout=$timeout" ;
	my $dbh = DBI->connect($dsn,$user,$pass) ;
	if( not $dbh )
	{
		print "ERROR: cannot connect to database host: $DBI::errstr\n" ;
		return undef ;
	}
	return $dbh ;
}

sub closedatabase($)
{
	my ( $dbh ) = @_ ;
	if( not $dbh->disconnect() )
	{
		print "ERROR: cannot close database: $DBI::errstr\n" ;
	}
}

sub writetable($$$$)
{
	my ( $dbh, $tablename, $sitename, $refdata ) = @_ ;
	my @data = @$refdata ;
	my $count = scalar @data ;
	if( $count == 0 )
	{
		print "ERROR: no new data for table\n" ;
		return 1 ;
	}
	if( $Debug ) { print "debug: updatetable: count=$count\n" ; }
	# Get the site number from the sitename table
	my $query = "select id from $TableNameSitelist where name='${sitename}' ;" ;
	if( $Debug ) { print "debug: writetable: query=$query\n" ; }
	my $result = dblookup($dbh,$query) ;
	if( not defined $result or ($result eq "") )
	{
		if( $Debug ) { print "debug: writetable: cannot find site code for site '$sitename'\n" ; }
		return 1 ;
	}
	my $site = $result ;
	if( $Debug ) { print "debug: writetable: site code for site '$sitename' is $site\n" ; }
	my $countdone = 0 ;
	my $countread = 0 ;
	for my $refentry ( @data )
	{
		$countread++ ;
		# Get the datetime from the array entry
		my $timestamp = $refentry->[1] ;
		if( (not defined $timestamp) or ($timestamp eq "") )
		{
			if( $Debug ) { print "debug: writetable: undefined timestamp, skipping this row\n" ; }
			next ;
		}
		# Check if the database already has an entry for these exact same data
		$query = "select id from $tablename where site='${site}' and timestamp='${timestamp}' ;" ;
		if( $Debug ) { print "debug: writetable: query=$query\n" ; }
		$result = dblookup($dbh,$query) ;
		if( defined $result and ($result ne "") )
		{
			if( $Debug ) { print "debug: writetable: timestamp exists at ID=$result, skipping this row\n" ; }
			next ;
		}
		$query = "insert into $tablename values(DEFAULT," ;	# first column is ID, automatically allocated
		$query .= "'${site}'" ;
		my @entry = @$refentry ;
		for my $value ( @$refentry )
		{
			$query .= ",'${value}'" ;
		}
		$query .= ") ;" ;
		if( $Debug ) { print "debug: updatetable: query=$query\n" ; }
		if( dbexecute($dbh,$query) )
		{
			print "ERROR: cannot add entry to table '$tablename'\n" ;
			return 1 ;
		}
		$countdone++ ;
	}
	print "Added $countdone entries to table '$tablename'\n" ;
	return 0 ;
}

sub test()
{
	return 0 ;
}

exit main() ;
#exit test() ;
#END
