#!/usr/bin/python
# TODO add timers for logging (e.g. see serv/proc/rmg_det_to_db) 
# TODO clean up output, as well as error handling in position.py.  

import qraat
import numpy as np
import os, commands, sys

(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "position: error: attempted reentry, exiting"
  sys.exit(1)

db_con = qraat.util.get_db('writer')
cursor = db_con.cursor()

#get id of last processed record
cursor.execute("SELECT value FROM qraat.cursor WHERE name='position'")
last_processed = cursor.fetchone()[0]
print "Last EST record processed: {}".format(last_processed)

#get txs to-be-processed
cursor.execute("select distinct(txid) from est where ID > %s;", (last_processed,))
tx_list = cursor.fetchall()
print "{} transmitters found in new records".format(len(tx_list))
print tx_list
if len(tx_list) > 0:
  cal_id = int(os.environ['RMG_POS_CAL_ID'])
  sv = qraat.position.steering_vectors(db_con, cal_id)

time_window = float(os.environ['RMG_POS_TIME_WINDOW'])
time_delta = float(os.environ['RMG_POS_TIME_STEP'])
max_id = last_processed
for tx in tx_list:
  tx_id = tx[0]
  print "Processing transmitter: {}".format(tx_id)
  #get times of to-be-processed records
  cursor.execute("select ID, timestamp from est where ID > %s and txid = %s order by timestamp ASC;", (last_processed,tx_id))
  times = np.array(cursor.fetchall(),dtype=float)
  print "Found {} records".format(times.shape[0])
  print "Calculating time range"
  #determine time range needed to be processed
  #TODO source rmg_env
  time_ranges = []
  if times.shape[0] > 0:
    temp_range = [times[0,1], times[0,1]]
    for j in range(1,times.shape[0]):
      if times[j,1] - time_window < temp_range[1] + time_window:
        temp_range[1] = times[j,1]
      else:
        time_ranges.append(temp_range)
        temp_range = [times[j,1], times[j,1]]
    time_ranges.append(temp_range)
  #TODO combine close ranges?

  
 #process time ranges
  for time_range in time_ranges:
    print "Processing {0} - {1}".format(time_range[0],time_range[1])
    
    est_ids = qraat.position.get_est_ids_bandfilter(db_con, 
                                                    tx_id, 
                                                    time_range[0]-time_window, 
                                                    time_range[1]+time_window)
    
    sig = qraat.position.signal(db_con, est_ids)
    
    if len(sig) == 0: 
      print "Skipping empty chunk"
      continue 
    
    bl = qraat.position.bearing(sv, sig)
    pos_est = qraat.position.calc_positions(sig, bl, time_window, time_delta)
    qraat.position.insert_positions(db_con, pos_est, tx_id)

  temp_max_id = np.max(times[:,0])
  if temp_max_id > max_id:
    max_id = temp_max_id

#store id of last processed record
if not max_id == last_processed:
  cursor.execute("UPDATE qraat.cursor SET value=%s WHERE name='position'", (max_id,))
