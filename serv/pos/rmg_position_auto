#!/usr/bin/python

import rmg_position_lib
import numpy as np
import os

db_con = rmg_position.get_db()
cursor = db_con.cursor()

#get id of last processed record
cursor.execute("select last_processed from position_processing;")
last_processed = cursor.fetchone()[0]
print "Last EST record processed: {}".format(last_processed)

#get txs to-be-processed
cursor.execute("select distinct(txid) from est where ID > %s;", (last_processed,))
tx_list = cursor.fetchall()
print "{} transmitters found in new records".format(len(tx_list))

if len(tx_list) > 0:
  cal_id = int(os.environ['RMG_POS_CAL_ID'])
  (sites, bearings, steering_vectors) = rmg_position_lib.get_site_data(db_con, cal_id)

for tx in tx_list:
  tx_id = tx[0]
  print "Processing transmitter: {}".format(tx_id)
  #get times of to-be-processed records
  cursor.execute("select ID, timestamp from est where ID > %s and txid = %s order by timestamp ASC;", (last_processed,tx_id))
  times = np.array(cursor.fetchall(),dtype=float)

  print "Calculating time range"
  #determine time range needed to be processed
  #TODO source rmg_env
  time_window = os.environ['RMG_POS_TIME_WINDOW']
  time_ranges = []
  if times.shape[0] > 0:
    temp_range = [times[0,1] - time_window, times[0,1] + time_window]
    for j in range(1,times.shape[0]):
      if times[j,1] - time_window < temp_range[1]:
        temp_range[1] = times[j,1] + time_window
      else:
        time_ranges.append(temp_range)
        temp_range = [times[j,1] - time_window, times[j,1]]
  #TODO combine close ranges?

  time_delta = os.environ['RMG_POS_TIME_STEP']
  

  #process time ranges
  for time_range in time_ranges:
    print "Processing {0} - {1}".format(time_range)
    (sig_id, site_id, est_time, signal) = rmg_position_lib.get_est_data(cursor, time_range[0], time_range[1], tx_id)
    likelihoods = rmg_position_lib.calc_likelihoods(signal, site_id, bearings, steering_vectors)
    pos_est = rmg_position_lib.estimate_positions(est_time, time_window, time_delta, sites, likelihoods):
    rmg_position_lib.insert_positions(cursor, pos_est, tx_id)

    #rmg_position.calc_positions(cal_id, txid, time_range[0], time_range[1], time_delta, time_window, cur = cursor)

#store id of last processed record
cursor.execute("update position_processing set last_processed=%s;", (np.max(times[0,:]),))
