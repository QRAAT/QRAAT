#!/usr/bin/python
# rmg_position
# Calculate the position of a target transmitter over a given
# time range. The function position_estimation() represents 
# our first iteration of this algorithm. This program 
# is part of QRAAT, an utomated animal tracking system 
# based on GNU Radio. 
#
# Copyright (C) 2013 Todd Borrowman, Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# TODO add timers for logging (e.g. see serv/proc/rmg_det_to_db) 

from optparse import OptionParser
import qraat

parser = OptionParser()

parser.description = '''\
Calculate the position of a target transmitter of a specified time 
range. Times are given as seconds as floating points. For example,
to calculate the position of transmitter ID=12 from 1:30PM on
June 14, 1999 to now, do "rmg_position --tx-id=12 
--t-start=$(date --date='19990614 1330' +%s) --t-end=$(date +%s) 
--plot". This program is part of QRAAT, an automated animal tracking 
system based on GNU Radio.   
'''

parser.add_option('--cal-id', type='int', metavar='INT', default=1,
                  help="Calibration ID, the serial identifier in the database "
                       "context identifying a calibration run. (Default is 1.)")

parser.add_option('--tx-id', type='int', metavar='INT', default=51,
                  help="Serial ID of the target transmitter in the database "
                       "context.")

parser.add_option('--t-delta', type='float', metavar='SEC', default=1.0,
                  help="Time step for each position calculation. (Default "
                       "is 1.0 seconds.) ")

parser.add_option('--t-window', type='float', metavar='SEC', default=30.0,
                  help="Time window to use for the position likelihood "
                       "calculation at each time step. (Default is 30.0 "
                       "seconds.)")

parser.add_option('--t-start', type='float', metavar='SEC', default=1376420800.0, 
                  help="Start time in secondes after the epoch (UNIX time).")

parser.add_option('--t-end', type='float', metavar='SEC', default=1376442000.0, 
                  help="End time in secondes after the epoch (UNIX time).")

parser.add_option('--plot', action='store_true', default=True, 
                  help="Show positions and receiver sites.")

parser.add_option('-v', '--verbose', action='store_true', default=False, 
                  help="Print the progression of the algorithm to the terminal.")

(options, args) = parser.parse_args()

db_con = qraat.util.get_db('writer')

print "position: fetching site data." 
sv = qraat.position.steering_vectors(db_con, options.cal_id)

print "position: fetching signal data."
sig = qraat.position.signal(db_con, 
                            options.t_start, 
                            options.t_end,
                            options.tx_id)

print "position: calculating bearing likelihoods (%d)." % len(sig) 
bl = qraat.position.bearing(sv, sig)

print "position: calculating positions."
(pos_est, pos_est_deps) = qraat.position.calc_positions(bl, 
                                                        options.t_window, 
                                                        options.t_delta, 
                                                        options.verbose) 

print "position: inserting positions."
qraat.position.insert_positions(db_con, pos_est, pos_est_deps, options.tx_id)

if options.plot: 

  import matplotlib.pyplot as pp

  # Plot sites.
  pp.plot(
   [s.easting for s in bl.sites], 
   [s.northing for s in bl.sites], 'ro')

  # Plot locations. 
  pp.plot( 
   map(lambda (t, e, n, ll): e, pos_est), 
   map(lambda (t, e, n, ll): n, pos_est), '.', alpha=0.3)

  pp.show()


