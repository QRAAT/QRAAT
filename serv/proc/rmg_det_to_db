#!/usr/bin/python
# rmg_det_to_db
# Batch process det files into the datbase. This script is part of the 
# QRAAT system. 
#
# Copyright (C) 2013 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os, commands, errno
import re, time
import MySQLdb as mdb
import qraat 

# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "det_to_db: error: attempted reentry, exiting"
  sys.exit(1)

try: # Get some environment variables. 
  det_dir  = os.environ['RMG_SERVER_DET_DIR']
  det_arch = os.environ['RMG_SERVER_DET_ARCHIVE']
  est_arch = os.environ['RMG_SERVER_EST_ARCHIVE']
except KeyError: 
  print >>sys.stderr, "det_to_db: error: undefined environment variables. Try `source rmg_env.`"
  sys.exit(1)

try: # Get database credentials. 
  db_config = qraat.csv(os.environ['RMG_SERVER_DB_AUTH']).get(view='writer')
except IOError, e: 
  print >>sys.stderr, "det_to_db: error: missing DB credential file '%s'." % e.filename
  sys.exit(1)
  


leaf_regex = re.compile("([0-9]{4})/([0-9]{2})/([0-9]{2})/([0-9]{2})/([0-9]{2})") 

try: 
  start = time.time()
  print "det_to_db: start time:", time.asctime(time.localtime(start))

  db_con = mdb.connect(db_config.host, 
                       db_config.user, 
                       db_config.password, 
                       db_config.name)

  cur = db_con.cursor()

  cur.execute('''SELECT name 
                   FROM sitelist''')

  for site in map(lambda row: row[0], cur.fetchall()):

    site_dir = '%s/%s' % (det_dir, site)
    
    # Don't process sites currently being fetched or that don't have files in them. 
    if os.path.isdir(site_dir) and not os.path.isfile('%s/fetching.site' % (site_dir)):
              
      (status, output) = commands.getstatusoutput(
        '/usr/bin/find %s/????/??/??/??/?? -type d' % site_dir )

           
      if status == 0 and output:
    
        # Batch process only the newest 20 directories that were created.
        leaf_dirs = sorted(output.split('\n'), reverse=True)
        total = len(leaf_dirs) 
        leaf_dirs = leaf_dirs[:20]
        print "det_to_db: %s: processing %d out of %d available directories" % ( 
          site, len(leaf_dirs), total) 

        for leaf_dir in leaf_dirs:

          #get directories
          date_tuple = leaf_regex.search(leaf_dir).groups(0)

          # Process det files, store signals in the database. 
          det_list, bad_list = qraat.det.read_dir(leaf_dir)
                    
          if bad_list: #there are non-readable det files
            
            det_q = os.environ['RMG_SERVER_DET_QUARANTINE']
            q_dir = ("%s/%s_" % (det_q, site)) +\
                       ("%s.%s.%s.%s.%s/" % date_tuple)
            try:
              os.makedirs(q_dir)
            except OSError:
              if not os.path.isdir(q_dir):
                raise
            
            for f in bad_list:
              commands.getstatusoutput("mv {0} {1}".format(f,q_dir))
          
          table = qraat.est(dets=det_list)
  
          cur = db_con.cursor()
          for row in table: 
            try:
              table.write_db_row(cur, row, site)
            except qraat.ResolveIdError, e:
              print >>sys.stderr, "det_to_db: warning: skipping est corresponding to '%s'" % e.filename
              det_q = os.environ['RMG_SERVER_DET_QUARANTINE']
              q_dir = ("%s/%s_" % (det_q, site)) +\
                       ("%s.%s.%s.%s.%s/" % date_tuple)
              try:
                os.makedirs(q_dir)
              except OSError, e:            # Catch if directory exists;
                if e.errno != errno.EEXIST: # otherwise, throw exception.  
                  raise e
              commands.getstatusoutput("mv {0} {1}".format(e.filename,q_dir))
          
                  
          # Archive table as est file. 
          table.write(("%s/%s/" % (est_arch, site)) +\
                       ("%s/%s/%s/%s/%s/" % date_tuple))
          
          # Archive processed det files.
          arch_fn = ("%s/%s/" % (det_arch, site)) +\
                     ("%s/%s/%s/%s/%s/" % date_tuple)
          try:
            os.makedirs(arch_fn)
          except OSError, e:            # Catch if directory exists;
            if e.errno != errno.EEXIST: # otherwise, throw exception.  
              raise e

          arch_fn += site + (".%s.%s.%s.%s.%s.tar" % date_tuple)
          if os.path.isfile(arch_fn): 
            (status, output) = commands.getstatusoutput(
              '/bin/tar -rf %s -C %s .' % (arch_fn, leaf_dir))
          else: 
            (status, output) = commands.getstatusoutput(
              '/bin/tar -cf %s -C %s .' % (arch_fn, leaf_dir))

          # Delete processed det files. 
          if status != 0: 
            print >>sys.stderr, "det_to_db: error: archiving %s: %s" % (
              site, output)
          else:  
            commands.getstatusoutput('rm -fr %s' % leaf_dir)

      else:# error in find or it returned nothing
        print >>sys.stderr, "det_to_db: error: {2}: find returned \"{0}\" with status {1}".format(output,status,site_dir)

except mdb.Error, e: 
  print >>sys.stderr, "det_to_db: error: [%d] %s" % (e.args[0], e.args[1])

finally: 
  print "det_to_db: finished in %.2f seconds." % (time.time() - start)
