#!/bin/bash

#
# This script installs the rmg module (direction finding) for GnuRadio
# written by Todd Borrowman Dec. 2009
# modified by Chris Patton Nov 2011/Feb 2012
#

INSTALL=false
UNINSTALL=false
DISTRIBUTE=false
SUDOASKED=false
CALL_DIR=$(pwd)
LOG=$(pwd)/install_rmg_log.txt
RMG_BASE_SRC=$(pwd)/base
RMG_BASE_BUILD=$(pwd)/base/build
RMG_SERVER_SRC=$(pwd)/server
RMG_SERVER_BUILD=$(pwd)/server/build
RMG_NODE_SRC=$(pwd)/node
RMG_NODE_BUILD=$(pwd)/node/build


# 
# verify we're not running as root
#
if [ $USER = root -o $UID -eq 0 ]
then
  echo 'This install script should be run by the user who will'
  echo 'use it. Sudo privileges will be obtained as needed.'
  exit
fi

function help {
  cat <<!EOF!

usage: build-rmg install/uninstall [-h,--help] [-v,--verbose] 
           [-l/--log] <file>
           [-s/--source-dir] <source-directory>
           [-b/--build-dir] <build-directory>

  install   requires that gnuradio and the UHD driver are already
            installed

  uninstall requires Makefile in <build-directory>

  dist      make a tarball from source

  -v        sets the log file /dev/stdout (terminal)

  -l        defaults to install_rmg_log.txt

  -s        defaults to \$(pwd) 

  -b        defaults to \$RMG_BUILD if set, otherwise
            \$(pwd)/build 

!EOF!
}

#
# copied from build-gnuradio script from Marcus Leech
#
function sudocheck {
  if [ $SUDOASKED = false ]
  then
    echo Sudo privileges are required 
    echo -n Do you have sudo privileges'?'
    read ans
    case $ans in
      y|yes|YES|Y)
        echo Continuing with script
        SUDOASKED=true
        sudo grep timestamp_timeout /etc/sudoers >tmp$$
        timeout=`cat tmp$$|awk '/./ {print $4}'`
        rm -f tmp$$
        if [ "@@" = "@$timeout@" ]
        then
          sudo cp /etc/sudoers tmp$$
          sudo chown $USER tmp$$
          sudo chmod 644 tmp$$
          echo "Defaults  timestamp_timeout = 90" >>tmp$$
          sudo cp tmp$$ /etc/sudoers
          sudo chown root /etc/sudoers
          sudo chmod 440 /etc/sudoers
        elif [ $timeout -lt 90 ]
          then
          echo You need to have a timestamp_timout in /etc/sudoers 
          echo of 90 or more echo Please ensure that your 
          echo timestamp_timeout is 90 or more
          exit
        fi
      ;;
    *)
      echo Exiting. Please ensure that you have sudo privileges 
      echo on this system to continue install. 
      exit
      ;;
    esac
  fi
}

#
# also copied from the build-gnuradio script
#
function my_echo {
  if [ $LOG = /dev/stdout ] 
  then
    echo $*
  else 
    echo $* >>$LOG 2>&1
  fi 
}


function node_install {
  sudocheck
  echo
  echo -n ' Installing Node software .'
  echo `date` > $LOG

  mkdir $RMG_NODE_BUILD &> /dev/null; cd $RMG_NODE_BUILD
  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- make clean"
  make clean >>$LOG 2>&1
  my_echo "--------------------------------"
  my_echo "--- running cmake "
  cmake $RMG_NODE_SRC >>$LOG 2>&1
  if [ ! -f $RMG_NODE_BUILD/Makefile ]; then
    echo
    echo  "error: configure: no Makefile produced. Check out log file for details."
    exit $?
  fi
  echo -n '.'

  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- make"
  make >>$LOG 2>&1
  if [ ! $? = 0 ]; then
    echo
    echo "error: make: exited with error status. Check out log file for details."
    exit $?
  fi
  echo -n '.'

  my_echo "--------------------------------"
  if dpkg -s python-serial 2>&1 | grep "install ok installed" > /dev/null; then
    my_echo '--- python-serial found'
  else
    sudo apt-get install python-serial
    my_echo '--- installed python serial'
  fi
  echo -n '.'
  
  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- sudo make install"
  sudo make install >>$LOG 2>&1
  if [ ! $? = 0 ]; then
    echo
    echo "error: install: exited with error status. Check out log file for details."
    exit $?
  fi
  echo -n '.'
  sudo ldconfig

  echo ' done.'
  echo 
}

function server_install {
  sudocheck
  echo
  echo -n ' Installing Server software .'
  echo `date` > $LOG

  mkdir $RMG_SERVER_BUILD &> /dev/null; cd $RMG_SERVER_BUILD
  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- make clean"
  make clean >>$LOG 2>&1
  my_echo "--------------------------------"
  my_echo "--- running cmake "
  cmake $RMG_SERVER_SRC >>$LOG 2>&1
  if [ ! -f $RMG_SERVER_BUILD/Makefile ]; then
    echo
    echo  "error: configure: no Makefile produced. Check out log file for details."
    exit $?
  fi
  echo -n '.'

  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- make"
  make >>$LOG 2>&1
  if [ ! $? = 0 ]; then
    echo
    echo "error: make: exited with error status. Check out log file for details."
    exit $?
  fi
  echo -n '.'

  my_echo "--------------------------------"
  if dpkg -s python-mysqldb 2>&1 | grep "install ok installed" > /dev/null; then
    my_echo '--- python-mysqldb found'
  else
    sudo apt-get install python-mysqldb
    my_echo '--- installed python mysqldb'
  fi
  echo -n '.'
  

  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- sudo make install"
  sudo make install >>$LOG 2>&1
  if [ ! $? = 0 ]; then
    echo
    echo "error: install: exited with error status. Check out log file for details."
    exit $?
  fi
  echo -n '.'
  sudo ldconfig

  echo ' done.'
  echo 
}

function base_install {
  sudocheck
  echo
  echo -n ' Installing Base software .'
  echo `date` > $LOG

  mkdir $RMG_BASE_BUILD &> /dev/null; cd $RMG_BASE_BUILD
  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- make clean"
  make clean >>$LOG 2>&1
  my_echo "--------------------------------"
  my_echo "--- running cmake "
  cmake $RMG_BASE_SRC >>$LOG 2>&1
  if [ ! -f $RMG_BASE_BUILD/Makefile ]; then
    echo
    echo  "error: configure: no Makefile produced. Check out log file for details."
    exit $?
  fi
  echo -n '.'

  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- make"
  make >>$LOG 2>&1
  if [ ! $? = 0 ]; then
    echo
    echo "error: make: exited with error status. Check out log file for details."
    exit $?
  fi
  echo -n '.'

  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- sudo make install"
  sudo make install >>$LOG 2>&1
  if [ ! $? = 0 ]; then
    echo
    echo "error: install: exited with error status. Check out log file for details."
    exit $?
  fi
  echo -n '.'
  sudo ldconfig

  echo ' done.'
  echo 
}

function dist {
  echo
  echo -n ' Distributing RMG .'
  echo `date` > $LOG

  mkdir $1 &> /dev/null; cd $1
  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- make clean"
  make clean >>$LOG 2>&1
  my_echo "--------------------------------"
  my_echo "--- running cmake "
  cmake $RMG_SRC >>$LOG 2>&1
  if [ ! -f $1/Makefile ]; then
    echo
    echo  "error: configure: no Makefile produced. Check out log file for details."
    exit $?
  fi
  echo -n '.'

  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- make package_source"
  make package_source >>$LOG 2>&1
  if [ ! $? = 0 ]; then
    echo
    echo "error: make: exited with error status. Check out log file for details."
    exit $?
  fi
  mv gr-rmg*.tar.gz $CALL_DIR
  echo -n '.'

  echo ' done.'
  echo 
}


function uninstall {
  sudocheck
  echo 
  echo -n ' Uninstalling RMG. '
  echo `date` > $LOG

  cd $1
  my_echo "--------------------------------"
  my_echo "--- in $(pwd)"
  my_echo "--- sudo make uninstall"
  sudo make uninstall >>$LOG 2>&1

  echo ' ... done.'
  echo 
}

while :
do
  case $1 in 
    install)
      INSTALL=true
      shift
      case $1 in
        base)
          BUILD_SECTIONS="base"
          ;;
        node)
          BUILD_SECTIONS="base node"
          ;;
        server)
          BUILD_SECTIONS="base server"
          ;;
        all)
          BUILD_SECTIONS="base server node"
          ;;
        *)
          echo "Unrecognized section to build"
          echo "Please specify [base, node, server, all] after install"
          exit
          ;;
      esac
      ;;
  
    uninstall)
      UNINSTALL=true
      shift
      case $1 in
        base)
          BUILD_SECTIONS="base"
          ;;
        node)
          BUILD_SECTIONS="base node"
          ;;
        server)
          BUILD_SECTIONS="base server"
          ;;
        all)
          BUILD_SECTIONS="base server node"
          ;;
        *)
          echo "Unrecognized section to build"
          echo "Please specify [base, node, server, all] after install"
          exit
          ;;
      esac
      ;;
      
    dist)
      DISTRIBUTE=true
      shift
      case $1 in
        base)
          BUILD_SECTIONS="base"
          ;;
        node)
          BUILD_SECTIONS="base node"
          ;;
        server)
          BUILD_SECTIONS="base server"
          ;;
        all)
          BUILD_SECTIONS="base server node"
          ;;
        *)
          echo "Unrecognized section to build"
          echo "Please specify [base, node, server, all] after install"
          exit
          ;;
      esac
      ;;

    -v|--verbose)
      LOG=/dev/stdout
      ;;

    -l|--log)
      shift
      if [ $1 ]; then
        LOG=$(readlink -f $1)
      else 
        echo '--log <file>'
        exit
      fi
      ;;

    -s|--source-dir)
      shift
      if [ $1 ]; then
        RMG_SRC=$(readlink -f $1)
      else
        echo '--source-dir <source-directory>' 
        exit
      fi
      ;;

    -b|--build-dir)
      shift
      if [ $1 ]; then
        RMG_BUILD=$(readlink -f $1)
      else 
        echo '--build-dir <build-directory>'
        exit
      fi
      ;;

    -h|--help)
      help
      exit
      ;;

    -*)
      echo unrecognized option: $1
      help
      exit
      ;;

    *)
      break
      ;;

  esac
  shift
done

if [ $INSTALL = true ]; then
  echo $BUILD_SECTIONS
  for s in $BUILD_SECTIONS; do
    case $s in
      base) base_install ;;
      server) server_install ;;
      node) node_install ;;
    esac
  done
fi

if [ $UNINSTALL = true ]; then
  for s in $BUILD_SECTIONS; do
    case $s in
      base) uninstall $RMG_BASE_BUILD ;;
      server) uninstall $RMG_SERVER_BUILD ;;
      node) uninstall $RMG_NODE_BUILD ;;
    esac
  done
fi

if [ $DISTRIBUTE = true ]; then
  for s in $BUILD_SECTIONS; do
    case $s in
      base) dist $RMG_BASE_BUILD ;;
      server) dist $RMG_SERVER_BUILD ;;
      node) dist $RMG_NODE_BUILD ;;
    esac
  done

fi 

