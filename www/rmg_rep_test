#!/bin/bash

echo Start `date`

# Check for attempted reentry
name=`basename $0`
count=`pgrep -c $name`
if [ "$count" -gt "1" ]
then
	echo
	echo $name already running, bye!
	echo
	exit 1
fi

echo PATH=$PATH
source rmg_env
echo RMG_SERVER_DB_AUTH=$RMG_SERVER_DB_AUTH
# Check if we have RMG environment variables
if [ "$RMG_SERVER_DB_AUTH" == "" ]
then
	echo
	echo Environment variable RMG_SERVER_DB_AUTH not defined in rmg_env.
	echo
	RMG_SERVER_DB_AUTH="/rmg_server/db_auth"
fi
# Lookup credentials from the approved place
backend_user=`rmg_csv --row view=repbackend user <$RMG_SERVER_DB_AUTH`
backend_password=`rmg_csv --row view=repbackend password <$RMG_SERVER_DB_AUTH`
backend_host=`rmg_csv --row view=repbackend host <$RMG_SERVER_DB_AUTH`
backend_database=`rmg_csv --row view=repbackend name <$RMG_SERVER_DB_AUTH`
backend_port="3306"
frontend_user=`rmg_csv --row view=repfrontend user <$RMG_SERVER_DB_AUTH`
frontend_password=`rmg_csv --row view=repfrontend password <$RMG_SERVER_DB_AUTH`
frontend_host=`rmg_csv --row view=repfrontend host <$RMG_SERVER_DB_AUTH`
frontend_database=`rmg_csv --row view=repfrontend name <$RMG_SERVER_DB_AUTH`
frontend_port="3306"

if [ "$backend_user" == "" -o "$backend_password == "" -o "$backend_host" == "" -o "$backend_database == "" ]
then
	echo
	echo Missing database credentials
	echo
	exit 1
fi

if [ -z "$frontend_user" -o -z "$frontend_password -o -z "$frontend_host" -o -z "$frontend_database ]
then
	echo
	echo Missing database credentials
	echo
	exit 1
fi

#echo TEMPORARY DEBUG INFO
#echo backend_user=$backend_user
#echo backend_password=$backend_password
#echo backend_host=$backend_host
#echo backend_database=$backend_database
#echo frontend_user=$frontend_user
#echo frontend_password=$frontend_password
#echo frontend_host=$frontend_host
#echo frontend_database=$frontend_database

redirect=1
if [ $redirect -eq 1 ]
then
	# Setup port forwarding to RMG server at the field station, runs as a background process
	ssh -N -L 13306:localhost:3306 replicator@rmgs &
	err=$?
	pid=$!
	if [ $err -ne 0 ]
	then
		echo Error starting port forward: $err
		exit 1
	fi
	if [ $pid == "" ]
	then
		echo Missing port forward pid
		exit 1
	fi
	echo Started port forwarder, pid $pid
	sleep 1 # give ssh a chance to setup its connection
	backend_host="127.0.0.1"
	backend_port="13306"
	echo Redirected to $backend_host:$backend_port
fi

# Rep away
echo
echo Replicating data from backend to frontend qraat database table 'position'
echo
pt-table-sync --verbose --execute ''h=$backend_host,P=$backend_port,D=$backend_database,t=position,u=$backend_user,p='replicator.backend$password''' ''h=$frontend_host,P=$frontend_port,u=$frontend_user,p='replicator.frontend$password'''
#pt-table-sync --verbose --execute 'h=qraat.ucdavis.edu,D=qraat,t=position,u=replicator,p=replicator.backend$password' 'h=localhost,u=replicator,p=replicator.frontend$password'
echo
echo Replicating data from backend to frontend qraat database table 'track_pos'
echo
pt-table-sync --verbose --execute ''h=$backend_host,P=$backend_port,D=$backend_database,t=track_pos,u=$backend_user,p='replicator.backend$password''' ''h=$frontend_host,P=$frontend_port,u=$frontend_user,p='replicator.frontend$password'''
#pt-table-sync --verbose --execute 'h=qraat.ucdavis.edu,D=qraat,t=track_pos,u=replicator,p=replicator.backend$password' 'h=localhost,u=replicator,p=replicator.frontend$password'
echo

if [ $redirect -eq 1 ]
then
	# Kill background ssh port forwarder
	if [ -n $pid ]
	then
		echo Stopping port forwarder, pid $pid
		kill $pid
	fi
fi

echo
echo Finish `date`

#END
