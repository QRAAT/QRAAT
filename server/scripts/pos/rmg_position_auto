#!/usr/bin/python
# TODO add timers for logging (e.g. see serv/proc/rmg_det_to_db) 
# TODO clean up output, as well as error handling in position.py.  

import qraat, qraat.srv
import numpy as np
import os, commands, sys

EST_SCORE_THRESHOLD = 0.15

(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "position_auto: error: attempted reentry, exiting"
  sys.exit(1)


db_con = qraat.util.get_db('writer')#will throw missing environment error here
cursor = db_con.cursor()

# Get id of last processed record (last record scored). 
cursor.execute("SELECT value FROM qraat.cursor WHERE name='position'")
last_processed = cursor.fetchone()
if last_processed == None:
  print >>sys.stderr,  "position_auto: error: No cursor found for position"
  sys.exit(1)
else: 
  last_processed = last_processed[0]
print "Last EST record processed: {}".format(last_processed)

# Get deployments that have been scored but not processed. 
cursor.execute('''SELECT DISTINCT deploymentID 
                    FROM est JOIN estscore 
                      ON est.ID = estscore.estID
                   WHERE ID > %s;''', (last_processed,))
deployment_list = cursor.fetchall()
print "{} transmitters found in new records".format(len(deployment_list))
print deployment_list
if len(deployment_list) > 0:
  cal_id = int(os.environ['RMG_POS_CAL_ID'])
  sv = qraat.srv.position.steering_vectors(db_con, cal_id)
  sv.get_utm_zone #checks sites are in same zone, throws error if not
  center = qraat.srv.position.get_center(db_con)

time_window = float(os.environ['RMG_POS_TIME_WINDOW'])
time_delta = float(os.environ['RMG_POS_TIME_STEP'])
max_id = last_processed
for deployment in deployment_list:
  deployment_id = deployment[0]
  print "Processing transmitter: {}".format(deployment_id)
  #get times of to-be-processed records
  cursor.execute('''SELECT ID, timestamp 
                      FROM est JOIN estscore
                        ON est.ID = estscore.estID
                     WHERE ID > %s AND deploymentID = %s 
                     ORDER BY timestamp ASC;''', (last_processed,deployment_id))
  times = np.array(cursor.fetchall(),dtype=float)
  print "Found {} records".format(times.shape[0])
  print "Calculating time range"
  #determine time range needed to be processed
  #time_ranges is a list of tuples determining the start and stop of a time_range
  #a time_range is a block of contiguous time_windows over which there is a signal
  time_ranges = []
  if times.shape[0] > 0:
    temp_range = [times[0,1], times[0,1]]
    for j in range(1,times.shape[0]):
      if times[j,1] - time_window < temp_range[1] + time_window:
        temp_range[1] = times[j,1]
      else:
        time_ranges.append(temp_range)
        temp_range = [times[j,1], times[j,1]]
    time_ranges.append(temp_range)
  #TODO combine close ranges?

  
 #process time ranges
  for time_range in time_ranges:
    print "Processing {0} - {1}".format(time_range[0],time_range[1])
    estimator = qraat.srv.position.estimator(deployment_id, time_range[0], time_range[1], time_window, time_delta)
    num_est = estimator.get_est_data(db_con, EST_SCORE_THRESHOLD)
    if num_est > 0:
      estimator.get_bearing_likelihood(sv)
      for new_estimator in estimator.windowed():
        new_estimator.insert_bearings(db_con)
        new_estimator.insert_positions(db_con, center)
    else:
      print "Skipping empty chunk"
      continue 

  temp_max_id = estimator.max_estID
  if temp_max_id > max_id:
    max_id = temp_max_id

#store id of last processed record
if max_id > last_processed:
  cursor.execute("UPDATE qraat.cursor SET value=%s WHERE name='position'", (max_id,))
