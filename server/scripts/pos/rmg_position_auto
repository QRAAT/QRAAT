#!/usr/bin/env python2
# TODO clean up output, as well as error handling in position.py.  

from qraat.srv import signal, position, util
position.ENABLE_BOOTSTRAP = False
import numpy as np
import os, commands, sys, time

(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "position_auto: error: attempted reentry, exiting"
  sys.exit(1)

#processing stats
runtime_start = time.time()
print "position_auto: start time: {}".format(time.asctime(time.localtime(runtime_start)))
total_input = 0
total_output = 0

db_con = util.get_db('writer')#will throw missing environment error here
cursor = db_con.cursor()

EST_SCORE_THRESHOLD = float(os.environ["RMG_POS_EST_THRESHOLD"])

# Get id of last processed record (last record scored). 
cursor.execute("SELECT value FROM qraat.processing_cursor WHERE name='position'")
last_processed = cursor.fetchone()
if last_processed == None:
  print >>sys.stderr,  "position_auto: error: No cursor found for position"
  sys.exit(1)
else: 
  last_processed = last_processed[0]
print "Last EST record processed: {}".format(last_processed)

# Get id of last processed est record. 
cursor.execute("SELECT value FROM qraat.processing_cursor WHERE name='estscore'")
last_processed_est = cursor.fetchone()
if last_processed_est == None:
  print >>sys.stderr,  "position_auto: error: No cursor found for estscore"
  last_processed_est = sys.maxint
else: 
  last_processed_est = last_processed_est[0]
print "Last EST record scored: {}".format(last_processed_est)

# Get deployments that have been scored but not processed. 
cursor.execute('''SELECT DISTINCT deploymentID 
                    FROM est JOIN estscore 
                      ON est.ID = estscore.estID
                   WHERE ID > %s
                     AND ID <= %s
                     AND (score/theoretical_score) >= %s;''', (last_processed,last_processed_est,EST_SCORE_THRESHOLD))
deployment_list = cursor.fetchall()
print "{} transmitters found in new records".format(len(deployment_list))
print deployment_list
if len(deployment_list) > 0:
  cal_id = int(os.environ['RMG_POS_CAL_ID'])
  sv = signal.SteeringVectors(db_con, cal_id)
  sites = util.get_sites(db_con)
  (center, zone) = util.get_center(db_con)

time_window = float(os.environ['RMG_POS_TIME_WINDOW'])
time_delta = float(os.environ['RMG_POS_TIME_STEP'])
max_id = last_processed
for deployment in deployment_list:
  deployment_id = deployment[0]
  print "Processing transmitter: {}".format(deployment_id)
  #get times of to-be-processed records
  cursor.execute('''SELECT ID, timestamp 
                      FROM est JOIN estscore
                        ON est.ID = estscore.estID
                     WHERE ID > %s AND ID <= %s AND deploymentID = %s 
                     ORDER BY timestamp ASC;''', (last_processed,last_processed_est,deployment_id))
  times = np.array(cursor.fetchall(),dtype=float)
  print "Found {} records".format(times.shape[0])
  print "Calculating time range"
  #determine time range needed to be processed
  #time_ranges is a list of tuples determining the start and stop of a time_range
  #a time_range is a block of contiguous time_windows over which there is a signal
  time_ranges = []
  if times.shape[0] > 0:
    temp_range = [times[0,1], times[0,1]]
    for j in range(1,times.shape[0]):
      if times[j,1] - time_window < temp_range[1] + time_window:
        temp_range[1] = times[j,1]
      else:
        time_ranges.append(temp_range)
        temp_range = [times[j,1], times[j,1]]
    time_ranges.append(temp_range)
  #TODO combine close ranges?

  
 #process time ranges
  temp_max_id = 0
  for time_range in time_ranges:
    print "Processing {0} - {1}".format(time_range[0],time_range[1])
    sig = signal.Signal(db_con, deployment_id, time_range[0], time_range[1], EST_SCORE_THRESHOLD)
    temp_max_id = max(temp_max_id, sig.max_id)
    pos = position.WindowedPositionEstimator(sig, sites, center, sv, time_delta, time_window)
    position.InsertPositions(db_con, deployment_id, cal_id, zone, pos)
    total_output += len(filter(lambda P: P.p != None, pos))

  if temp_max_id > max_id:
    max_id = temp_max_id

#don't move position cursor past estscore cursor due to chunking bug
if max_id > last_processed_est:
  max_id = last_processed_est

#store id of last processed record
if max_id > last_processed:
  cursor.execute("UPDATE qraat.processing_cursor SET value=%s WHERE name='position'", (max_id,))
  print "updating cursor position to {}".format(max_id)
else:
  print "no new records processed (max_id={0})".format(max_id)

duration = time.time() - runtime_start
print "position_auto: finished in {0:.2f} seconds.".format(duration)
cursor.execute('INSERT INTO processing_statistics (timestamp, duration, process, beginning_index, ending_index, number_records_input, number_records_output) VALUES (%s, %s, \'position_auto\', %s, %s, %s, %s)', (int(runtime_start), duration, last_processed+1, max_id, total_input, total_output))

