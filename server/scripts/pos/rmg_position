#!/usr/bin/python
# rmg_position
# Calculate the position of a target transmitter over a given
# time range. The function position_estimation() represents 
# our first iteration of this algorithm. This program 
# is part of QRAAT, an utomated animal tracking system 
# based on GNU Radio. 
#
# Copyright (C) 2013 Todd Borrowman, Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import qraat, qraat.srv
import time, os, sys, commands
import MySQLdb as mdb
from optparse import OptionParser

# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "position: error: attempted reentry, exiting"
  sys.exit(1)

parser = OptionParser()

parser.description = '''\
Calculate the position of a target transmitter of a specified time 
range. Times are given as seconds as floating points. For example,
to calculate the position of transmitter ID=12 from 1:30PM on
June 14, 1999 to now, do "rmg_position --dep-id=12 
--t-start=$(date --date='19990614 1330' +%s) --t-end=$(date +%s) 
--plot". This program is part of QRAAT, an automated animal tracking 
system based on GNU Radio.   
'''

parser.add_option('--cal-id', type='int', metavar='INT', default=3,
                  help="Calibration ID, the serial identifier in the database "
                       "context identifying a calibration run. (Default is 3.)")

parser.add_option('--dep-id', type='int', metavar='INT', default=51,
                  help="Serial ID of the target and transmitter in the database "
                       "context.")

parser.add_option('--t-delta', type='float', metavar='SEC', default=1.0,
                  help="Time step for each position calculation. (Default "
                       "is 1.0 seconds.) ")

parser.add_option('--t-window', type='float', metavar='SEC', default=30.0,
                  help="Time window to use for the position likelihood "
                       "calculation at each time step. (Default is 30.0 "
                       "seconds.)")

parser.add_option('--t-start', type='float', metavar='SEC', default=1376420800.0, 
                  help="Start time in secondes after the epoch (UNIX time).")

parser.add_option('--t-end', type='float', metavar='SEC', default=1376442000.0, 
                  help="End time in secondes after the epoch (UNIX time).")

parser.add_option('--t-chunk', type='float', metavar='SEC', default=60 * 60 * 4, 
                  help="Size of signal chunk to fetch simultaneously. (Note that this "
                       "doesn't affect the calculation, just the memory foot print of " 
                       "this program.)")
  
parser.add_option('-v', '--verbose', action='store_true', default=False, 
                  help="Print the progression of the algorithm to the terminal.")

parser.add_option('--thresh', type='float', metavar='[0 .. 1]', default=0, 
                  help="Apply time filter to EST data wiht threshold value.")

parser.add_option('--band', action='store_true', default=False, 
                  help="Apply band filter to EST data.")

(options, args) = parser.parse_args()

try: 
  start = time.time()
  print "position: start time:", time.asctime(time.localtime(start))

  db_con = qraat.util.get_db('writer')
  
  print "position: fetching site data." 
  sv = qraat.srv.position.steering_vectors(db_con, options.cal_id)
  center = qraat.srv.position.get_center(db_con)

  if options.thresh > 0: # FIXME apply time filter.
    print "position: using time filter with threshold %f." % options.thresh
    print >>sys.stderr, "position: warning: time filter not implemented."
    get_est_ids = qraat.srv.position.get_est_ids
  elif options.band: 
    print "position: using band filter."
    get_est_ids = qraat.srv.position.get_est_ids_bandfilter
  else: 
    print "position: no signal filter."
    get_est_ids = qraat.srv.position.get_est_ids

  chunks = range(int(options.t_start), int(options.t_end), int(options.t_chunk))

  for i in range(len(chunks)):

    print "position: fetching chunk %d of %d." % (i+1, len(chunks)) 
    
    est_ids = get_est_ids(db_con, options.dep_id, chunks[i], chunks[i] + options.t_chunk)
    sig = qraat.srv.position.signal(db_con, est_ids)

    if len(sig) == 0:
      print "position: skipping empty chunk."
      continue

    print "position: calculating bearing likelihoods (%d)." % len(sig) 
    bl = qraat.srv.position.position_estimator(sv, sig)

    print "position: calculating positions."
    (bearing, position) = qraat.srv.position.calc_positions(sig, bl,
                                                        center,
                                                        options.t_window, 
                                                        options.t_delta, 
                                                        options.dep_id,
                                                        options.verbose) 

    print "position: inserting positions (%d)." % (len(position))
    position.insert_db(db_con)
    print "position: inserting bearings (%d)." % (len(bearing))
    bearing.insert_db(db_con)

except mdb.Error, e:
  print >>sys.stderr, "position: error: [%d] %s" % (e.args[0], e.args[1])
  sys.exit(1)

except qraat.error.QraatError, e:
  print >>sys.stderr, "position: error: %s." % e

finally: 
  print "position: finished in %.2f seconds." % (time.time() - start)
