#!/usr/bin/env python2
# rmg_position
# Calculate the position of a target transmitter over a given
# time range. The function position_estimation() represents 
# our first iteration of this algorithm. This program 
# is part of QRAAT, an automated animal tracking system 
# based on GNU Radio. 
#
# Copyright (C) 2013 Todd Borrowman, Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from qraat.srv import position, signal, util
import time, sys, commands
from optparse import OptionParser

# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "position: error: attempted reentry, exiting"
  sys.exit(1)

parser = OptionParser()

parser.description = '''\
Calculate the position of a target transmitter of a specified time 
range. Times are given as seconds as floating points. For example,
to calculate the position of transmitter ID=12 from 1:30PM on
June 14, 1999 to now, do "rmg_position --dep-id=12 
--t-start=$(date --date='19990614 1330' +%s) --t-end=$(date +%s) 
--plot". This program is part of QRAAT, an automated animal tracking 
system based on GNU Radio.   
'''

parser.add_option('--cal-id', type='int', metavar='INT', default=3,
                  help="Calibration ID, the serial identifier in the database "
                       "context identifying a calibration run. (Default is 3.)")

parser.add_option('--dep-id', type='int', metavar='INT', default=51,
                  help="Serial ID of the target and transmitter in the database "
                       "context.")

parser.add_option('--t-delta', type='float', metavar='SEC', default=15.0,
                  help="Time step for each position calculation. (Default "
                       "is 15.0 seconds.) ")

parser.add_option('--t-window', type='float', metavar='SEC', default=30.0,
                  help="Time window to use for the position likelihood "
                       "calculation at each time step. (Default is 30.0 "
                       "seconds.)")

parser.add_option('--t-start', type='float', metavar='SEC', default=1376420800.0, 
                  help="Start time in secondes after the epoch (UNIX time).")

parser.add_option('--t-end', type='float', metavar='SEC', default=1376442000.0, 
                  help="End time in secondes after the epoch (UNIX time).")

parser.add_option('--t-chunk', type='float', metavar='SEC', default=60 * 60 / 4, 
                  help="Size of signal chunk to fetch simultaneously. (Note that this "
                       "doesn't affect the calculation, just the memory foot print of " 
                       "this program.)")

parser.add_option('--no-cov', action='store_false', dest='compute_cov', default=True, 
                  help="Don't compute covariance.")
  
parser.add_option('-v', '--verbose', action='store_true', default=False, 
                  help="Print the progression of the algorithm to the terminal.")

parser.add_option('--thresh', type='float', metavar='[0 .. 1]', default=0.0, 
                  help="Apply time filter to EST data wiht threshold value.")

(options, args) = parser.parse_args()

 
start = time.time()
print "position: start time:", time.asctime(time.localtime(start))

db_con = util.get_db('writer')
  
print "position: fetching site data." 
sv = signal.SteeringVectors(db_con, options.cal_id)
sites = util.get_sites(db_con)
(center, zone) = util.get_center(db_con)

chunks = []
ts = options.t_start
while (options.t_end - ts > options.t_chunk):
  chunks.append((ts, ts+options.t_chunk))
  ts += options.t_chunk
chunks.append((ts, options.t_end))

for i in range(len(chunks)):

  print "position: fetching chunk %d of %d." % (i+1, len(chunks)) 

  # Get signal data.
  sig = signal.Signal(db_con, options.dep_id, chunks[i][0], chunks[i][1], 
                                              score_threshold=options.thresh)

  if not options.compute_cov: 
    position.ENABLE_BOOTSTRAP = False
    
  # Compute bearing spectra (Bartlet's estimator), estimate the
  # position of the transmitter at each data window. 
  print 'position: computing positions'
  pos = position.WindowedPositionEstimator(sig, sites, center, sv, options.t_delta, options.t_window)

  if options.compute_cov:
    # Compute covariances
    print 'position: computing covariances'
    cov = position.WindowedCovarianceEstimator(pos, sites)

    # Insert positions, bearings, and covariances into database. 
    position.InsertPositionsCovariances(db_con, options.dep_id, options.cal_id, zone, pos, cov)

  else:
    # Insert positions and bearings into database.
    position.InsertPositions(db_con, options.dep_id, options.cal_id, zone, pos)
    

print "position: finished in {0:.2f} seconds.".format(time.time() - start)
