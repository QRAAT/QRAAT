#!/usr/bin/env python2
# rmg_afsk_to_db
# reads .cov and .afsk files from gps-afsk and inserts data into database
# doesn't move files that are processed
#
# Copyright (C) 2014 Todd Borrowman
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import sys, os, commands, errno
import re, time
import MySQLdb as mdb
import qraat.afsk, qraat.continuous_covariance
import qraat.srv


# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename {}`'.format(sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "afsk_to_db: error: attempted reentry, exiting"
  sys.exit(1)

if len(sys.argv) > 1:
  if os.path.isdir(sys.argv[1]):
    afsk_dir = sys.argv[1]
  else:
    print >>sys.stderr, "{} not a directory".format(sys.argv[1])
    sys.exit(2)
  if len(sys.argv) == 2:
    siteID=int(sys.argv[2])
  else:
    siteID="NULL"
else:
  print >>sys.stderr, "usage: rmg_afsk_to_db path_to_files siteID"
  sys.exit(2)

leaf_regex = re.compile("([0-9]{4})/([0-9]{2})/([0-9]{2})/([0-9]{2})/([0-9]{2})") 

#processing_stats
start = time.time()
print "afsk_to_db: start time:", time.asctime(time.localtime(start))
total_directories = 0
total_det_files = 0

db_con = qraat.srv.util.get_db('writer')
try: 
  cur = db_con.cursor()
except mdb.Error, e: 
  print >>sys.stderr, "afsk_to_db: MySQLdb error: [{0:d}] {1}".format(e.args[0], e.args[1])
  print >>sys.stderr, "afsk_to_db: Error while establishing DB connection"
  print "afsk_to_db: finished with error in {0:.2f} seconds.".format(time.time() - start)
  raise

directory_counter = 0
afsk_counter = 0
cov_counter = 0
tdat_counter = 0
bad_counter = 0
for leaf_dir,sublist,filelist in os.walk(afsk_dir):
  if sublist:
    sublist.sort()
  elif filelist:

    #get directories
    search_result = leaf_regex.search(leaf_dir)
    if search_result:
      directory_counter+=1
      print "Found {} {}".format(leaf_dir,directory_counter)
      date_tuple = search_result.groups(0)

      # Process afsk and cov files, store signals in the database. 
      for fn in filelist:
        if fn[-5:] == '.afsk':
          try:
            afsk = qraat.afsk.afsk(os.path.join(leaf_dir,fn))
            afsk.write_to_db(db_con, siteID)
          except:
            bad_counter += 1
            raise
          else:
            afsk_counter += 1
        elif fn[-4:] == '.cov':
          try:
            cov = qraat.continuous_covariance.continuous_covariance(os.path.join(leaf_dir,fn))
            cov.write_to_db(db_con, siteID)
          except:
            bad_counter += 1
            raise
          else:
            cov_counter += 1
        elif fn[-5:] == '.tdat':
          tdat_counter += 1
        else:
          bad_counter += 1

print afsk_dir
print "{} directories read".format(directory_counter)
print "{} afsk files read".format(afsk_counter)
print "{} cov files read".format(cov_counter)
print "{} tdat files found".format(tdat_counter)
print "{} bad files".format(bad_counter)
