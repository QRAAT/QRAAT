#!/usr/bin/python
# rmg_track_auto_auto
# 
# Copyright (C) 2014 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import qraat, qraat.srv
import time, os, sys, commands
import MySQLdb as mdb
from optparse import OptionParser

# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "track_auto: error: attempted reentry, exiting"
  sys.exit(1)

try: 
  start = time.time()
  print "track_auto: start time:", time.asctime(time.localtime(start))

  db_con = qraat.util.get_db('writer')

  # Get posID of last processed position.  
  cur = db_con.cursor()
  cur.execute('SELECT value FROM qraat.cursor WHERE name=\'track_pos\'')
  last_processed = int(cur.fetchone()[0])

  # Get a list of trackIDs with new positions and their earliest timestamp. 
  cur.execute('''SELECT DISTINCT t.ID, t.depID
                   FROM qraat.Position AS p, qraat.track AS t
                  WHERE p.ID > %d
                    AND t.depID = p.depID''' % last_processed)
  
  rows = map(lambda(row) : (int(row[0]), int(row[1])), cur.fetchall())
  print "track_auto: new data for", map(lambda(row) : row[0], rows)
 
  # Process new positions for reach trackID. 
  max_processed = last_processed
  for (track_id, dep_id) in rows:
    cur.execute('''SELECT min(timestamp), max(timestamp) 
                     FROM qraat.Position 
                    WHERE depID=%d
                      AND ID >= %d''' % (dep_id, last_processed))
    
    (t_start, t_end) = map(lambda(t) : float(t), (cur.fetchone()))
    print "track_auto: trackID=%d: depID=%d over [%.2f, %.2f]" % (track_id, dep_id, t_start, t_end)
  
    print "track_auto: trackID=%d: fetching positions ..." % track_id,
    pos_ids = qraat.srv.track.get_pos_ids(db_con, dep_id, t_start, t_end)
    pos = qraat.srv.position.Position(db_con, pos_ids)
    print len(pos)
  
    print "track_auto: trackID=%d: calculating ..." % track_id,
    track = qraat.srv.track.calc_tracks(db_con, pos, track_id, C=0)
    print len(track)

    print "track_auto: trackID=%d: updating tracks." % track_id
    track.insert_db(db_con)
    
    # New cursor is the maximum id processed during this run
    max_processed = max(max_processed, max(pos_ids))

  if max_processed > last_processed: 
    print "track_auto: updating cursor to posID=%d." % max_processed
    cur.execute('''UPDATE qraat.cursor 
                      SET value=%d 
                    WHERE name="track_pos" ''' % max_processed)  
  

except mdb.Error, e:
  print >>sys.stderr, "track_auto: error: [%d] %s" % (e.args[0], e.args[1])
  sys.exit(1)

except qraat.error.QraatError, e:
  print >>sys.stderr, "track_auto: error: %s." % e

finally: 
  print "track_auto: finished in %.2f seconds." % (time.time() - start)
