#!/usr/bin/env python2
# rmg_track_auto
#
# Read in new positions and update tracks for each deployment. New 
# data is divided into for hour chunks (`TRACK_THROTTLE`). If the 
# time chunk contains less than 500 positions (see `WINDOW_LENGTH`),
# the window is extended (back in time) so that that the chunk 
# includes at least 500 points. The tracker (`qraat.srv.calc_tracks()`)
# is called on the chunk. It divides the data into overlapping windows 
# of at most 500 points and executes the quadratic-time tracking 
# algorithm on each set of points. Now, since the windows overlap, 
# each time index t has 0, 1, or 2 track points. In the case that 
# there are two, we take the one with the highest likelihood. 
#
# TODO A potential issue arises in online processing. When new data 
# arrive, we grab about 500 points from the past and recalculate. The 
# result is the last time a point is touched (on average), it is at the 
# very edge of the window. It's possible that a decision to include or 
# exclude this point would be better made if it were right in the 
# middle of the window. Think about this.
#
# Copyright (C) 2014 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import qraat, qraat.srv
import time, os, sys, commands
import MySQLdb as mdb
from optparse import OptionParser


TRACK_THROTTLE = 60 * 60 * 4 # 4 hour chunks

def chunk(timestamps): 
  ''' Return a set of time intervals for new data. '''  
  
  t_start = min(timestamps)
  t_end = max(timestamps)
  a = t_start - (t_start % TRACK_THROTTLE) 
  b = t_end - (t_end % TRACK_THROTTLE)
  n = int(b - a) / TRACK_THROTTLE
  bins = [ 0 for i in range(n+1) ]
  for t in timestamps: 
    i = int((t - t_start) / TRACK_THROTTLE)
    bins[i] += 1
  for (i, ct) in enumerate(bins):
    if ct > 0: 
      yield (a + (i * TRACK_THROTTLE), (a + ((i + 1) * TRACK_THROTTLE)))



# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "track_auto: error: attempted reentry, exiting"
  sys.exit(1)

try: 
  start = time.time()
  print "track_auto: start time:", time.asctime(time.localtime(start))

  db_con = qraat.srv.util.get_db('writer')

  # Get positionID of last processed position.  
  cur = db_con.cursor()
  cur.execute('SELECT value FROM qraat.processing_cursor WHERE name=\'track_pos\'')
  last_processed = cur.fetchone()
  if last_processed is None: 
    print >>sys.stderr,  "track_auto: error: No cursor found for track_pos"
    sys.exit(1)
  else: last_processed = int(last_processed[0])

  # Get a list of depIDs with new positions and their earliest timestamp. 
  cur.execute('''SELECT DISTINCT deploymentID 
                   FROM qraat.position 
                  WHERE ID > %s''', (last_processed))

  rows = map(lambda(row) : int(row[0]), cur.fetchall())
  print "track_auto: new data for", rows
 
  # Process new positions for each depID. 
  max_processed = last_processed
  for dep_id in rows:
    cur.execute('''SELECT timestamp 
                     FROM qraat.position 
                    WHERE deploymentID=%d
                      AND ID > %d''' % (dep_id, last_processed))

    for (t_start, t_end) in chunk(map(lambda(row) : float(row[0]), cur.fetchall())): 
      
      (t_start, t_end) = qraat.srv.track.get_interval(db_con, dep_id, t_start, t_end)
      
      print "track_auto: deploymentID=%d, [%.2f, %.2f]" % (dep_id, t_start, t_end)
      track = qraat.srv.track.calc_tracks(db_con, dep_id, t_start, t_end, C=0)

      print "track_auto: deploymentID=%d, updating tracks, %d out of %d." % (
                                             dep_id, len(track), len(track.pos))
      track.insert_db(db_con)
      
      # New cursor is the maximum id processed during this run
      max_processed = max(max_processed, track.pos.get_max_id())

  if max_processed > last_processed: 
    print "track_auto: updating cursor to positionID=%d." % max_processed
    cur.execute('''UPDATE qraat.processing_cursor 
                      SET value=%d 
                    WHERE name="track_pos" ''' % max_processed)  
  

except mdb.Error, e:
  print >>sys.stderr, "track_auto: error: [%d] %s" % (e.args[0], e.args[1])
  sys.exit(1)

except qraat.error.QraatError, e:
  print >>sys.stderr, "track_auto: error: %s." % e

finally: 
  print "track_auto: finished in %.2f seconds." % (time.time() - start)
