#!/usr/bin/env python2
import sys, os, commands, errno
import re, time
import MySQLdb as mdb
import qraat #needs qraat.det, qraat.est
import qraat.srv


# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename {}`'.format(sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "det_to_db: error: attempted reentry, exiting"
  sys.exit(1)

try: # Get some environment variables. 
  det_dir  = "/rmg_server/quarantine/det_files"#os.environ['RMG_SERVER_DET_DIR']
  det_arch = "/rmg_server/quarantine/processed_det_files"#os.environ['RMG_SERVER_DET_ARCHIVE']
  est_arch = "/rmg_server/quarantine/processed_est_files"#os.environ['RMG_SERVER_EST_ARCHIVE']
  DIRECTORY_THROTTLE=int(os.environ['RMG_DIRECTORY_THROTTLE'])
except KeyError: 
  print >>sys.stderr, "det_to_db: error: undefined environment variables. Try `source rmg_env.`"
  sys.exit(1)


#leaf_regex = re.compile("([0-9]{4})/([0-9]{2})/([0-9]{2})/([0-9]{2})/([0-9]{2})") 
leaf_regex = re.compile("(site[0-9]*)_([0-9]{4}).([0-9]{2}).([0-9]{2}).([0-9]{2}).([0-9]{2})")

#processing_stats
start = time.time()
print "det_to_db: start time:", time.asctime(time.localtime(start))
total_directories = 0
total_det_files = 0

db_con = qraat.srv.util.get_db('writer')
try: 
  cur = db_con.cursor()
except mdb.Error, e: 
  print >>sys.stderr, "det_to_db: MySQLdb error: [{0:d}] {1}".format(e.args[0], e.args[1])
  print >>sys.stderr, "det_to_db: Error while establishing DB connection"
  print "det_to_db: finished with error in {0:.2f} seconds.".format(time.time() - start)
  raise


try:
  cur.execute('SELECT name FROM site')
  db_sitelist = map(lambda row: row[0], cur.fetchall())
except mdb.Error, e:
  print >>sys.stderr, "det_to_db: MySQLdb error: [{0:d}] {1}".format(e.args[0], e.args[1])
  print >>sys.stderr, "det_to_db: Error while selecting site names"
  print "det_to_db: finished with error in {0:.2f} seconds.".format(time.time() - start)
  raise

  
#../quarantine/det_files/site2_2016.06.22.19.23
for leaf_dir,sublist,filelist in os.walk(det_dir):
  if filelist:
    search_result = leaf_regex.search(leaf_dir)
    if search_result:
      print "Found {}".format(leaf_dir)
      date_tuple = search_result.groups(0)

      # Process det files, store signals in the database. 
      det_list, bad_list = qraat.det.det.read_dir(leaf_dir)
                    
      table = qraat.est.est(dets=det_list)
  
      cur = db_con.cursor()
      for row in table: 
        try:
          table.write_db_row(cur, row, date_tuple[0])
          total_det_files+=1
        except Exception as e:
          #could be qraat.ResolveIdError from est class
          #could be MySQLdb.error that we haven't anticipated
          print >>sys.stderr, "det_to_db: warning: skipping est row corresponding to '{0}' due to error from qraat.est.est.write_db_row()".format(row.fn)
          print >>sys.stderr, "det_to_db: error was: {0}".format(e)

      # Archive table as est file. 
      table.write(os.path.join(est_arch, *date_tuple))
    
      # Archive processed det files.
      arch_fn = os.path.join(det_arch, *date_tuple)
      try:
        os.makedirs(arch_fn)
      except OSError, e:            # Catch if directory exists;
        if e.errno != errno.EEXIST: # otherwise, throw exception.  
          raise e

      arch_fn += ("{}.{}.{}.{}.{}.{}.tar".format(*date_tuple))
      if os.path.isfile(arch_fn): 
        (status, output) = commands.getstatusoutput(
          '/bin/tar -rf {} -C {} .'.format(arch_fn, leaf_dir))
      else: 
        (status, output) = commands.getstatusoutput(
          '/bin/tar -cf {} -C {} .'.format(arch_fn, leaf_dir))

      # Delete processed det files. 
      if status != 0: 
        print >>sys.stderr, "det_to_db: error: archiving {}: {}".format(site, output)
        print >>sys.stderr, output
      else:  
        (status, output) = commands.getstatusoutput('rm -fr {}'.format(leaf_dir))
        if status != 0:
          print >>sys.stderr, "det_to_db: error: deleting {}".format(leaf_dir)
          print >>sys.stderr, output
        else:
          total_directories+=1

