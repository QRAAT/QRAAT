#!/usr/bin/env python2
# rmg_fetch
# Input a directory tree, e.g., find det -type d, and output the 
# directories that we want to fetch from the RMG remote computer. 
# This excludes the "hot" directory, consolidates the directories 
# into as few scp calls as possible. This script is part of the 
# QRAAT system. 
#
# Copyright (C) 2013 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os, re, time, sys
class Tree: 

  def __init__(self, parent=None, hot=False):
    self.hot = hot
    self.parent = parent
    self.children = {}
  
  def insert(self, branch, hot): 
  # insert a branch
    if not self.hot and hot:  # if hot once, hot forever
      self.hot = hot
    if branch == []:
      return
    else:
      try:  
        self.children[branch[0]].insert(branch[1:], hot)
      except KeyError: 
        self.children[branch[0]] = Tree(self)
        self.children[branch[0]].insert(branch[1:], hot)        

  def copiable(self, directory=None): 
  # emit non-hot, i.e. copiable,  directories.
    if self.parent == None: # root directory
      (name, child) = (self.children.keys()[0], self.children.values()[0])
      child.copiable(directory + "/" + name)
    elif self.hot == False: # no children hot, this whole directory can be copied
      print directory
    else:                   # directory has a hot child, recurse
      for (name, child) in self.children.iteritems():
        child.copiable(directory + "/" + name)


prog = re.compile("([0-9]{4})(\/([0-9]{2})){4}") 

now = time.gmtime(time.time() - (120)) # Exclude last two minutes, actually. This 
                                       # is to account for possible synchronization 
                                       # issues-up to one minute of clock slippage. 
             
t = [now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min]

tree = Tree()

for line in sys.stdin.readlines():
  if prog.search(line): 
    
    # Fetch if directory is sufficiently old. 
    d = line.strip().split("/")
    ts = map(lambda n: int(n), d[1:])
    fetch = True
    for i in range(len(ts)):
      if ts[i] < t[i]: break
      elif ts[i] > t[i]: 
        fetch = False
        break 

    tree.insert(d[1:], hot=not fetch)

try: 
  tree.copiable(d[0])
except: pass
