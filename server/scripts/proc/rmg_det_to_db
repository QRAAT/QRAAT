#!/usr/bin/env python2
# rmg_det_to_db
# Batch process det files into the datbase. This script is part of the 
# QRAAT system. 
#
# Copyright (C) 2013 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os, commands, errno
import re, time
import MySQLdb as mdb
import qraat #needs qraat.det, qraat.est
import qraat.srv


# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename {}`'.format(sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "det_to_db: error: attempted reentry, exiting"
  sys.exit(1)

try: # Get some environment variables. 
  det_dir  = os.environ['RMG_SERVER_DET_DIR']
  det_arch = os.environ['RMG_SERVER_DET_ARCHIVE']
  est_arch = os.environ['RMG_SERVER_EST_ARCHIVE']
  det_q = os.environ['RMG_SERVER_DET_QUARANTINE']
  DIRECTORY_THROTTLE=int(os.environ['RMG_DIRECTORY_THROTTLE'])
except KeyError: 
  print >>sys.stderr, "det_to_db: error: undefined environment variables. Try `source rmg_env.`"
  sys.exit(1)


leaf_regex = re.compile("([0-9]{4})/([0-9]{2})/([0-9]{2})/([0-9]{2})/([0-9]{2})") 

#processing_stats
start = time.time()
print "det_to_db: start time:", time.asctime(time.localtime(start))
total_directories = 0
total_det_files = 0

db_con = qraat.srv.util.get_db('writer')
try: 
  cur = db_con.cursor()
except mdb.Error, e: 
  print >>sys.stderr, "det_to_db: MySQLdb error: [{0:d}] {1}".format(e.args[0], e.args[1])
  print >>sys.stderr, "det_to_db: Error while establishing DB connection"
  print "det_to_db: finished with error in {0:.2f} seconds.".format(time.time() - start)
  raise


try:
  cur.execute('SELECT name FROM site')
  db_sitelist = map(lambda row: row[0], cur.fetchall())
except mdb.Error, e:
  print >>sys.stderr, "det_to_db: MySQLdb error: [{0:d}] {1}".format(e.args[0], e.args[1])
  print >>sys.stderr, "det_to_db: Error while selecting site names"
  print "det_to_db: finished with error in {0:.2f} seconds.".format(time.time() - start)
  raise

  
dir_sitelist = []
(status, output) = commands.getstatusoutput(
        '/usr/bin/find {0}/* -maxdepth 0 -type d'.format(det_dir) )
if status == 0:
  sitedirs = output.split('\n')
  for d in sitedirs:
    dir_sitelist.append(d.split('/')[-1])
else:
  print "det_to_db: no site directories found in {}".format(det_dir)


for site in dir_sitelist:

  if site in db_sitelist:
    site_dir = os.path.join(det_dir, site)
    
    # Don't process sites currently being fetched or that don't have files in them. 
    if os.path.isdir(site_dir) and not os.path.isfile(os.path.join(site_dir,'fetching.site')):
              
      directory_counter = 0
      for leaf_dir,sublist,filelist in os.walk(site_dir):
        if directory_counter >= DIRECTORY_THROTTLE:
          break
        elif sublist:
          sublist.sort()
          sublist.reverse()
        elif filelist:

          #get directories
          search_result = leaf_regex.search(leaf_dir)
          if search_result:
            directory_counter+=1
            print "Found {} {}".format(leaf_dir,directory_counter)
            date_tuple = search_result.groups(0)

            # Process det files, store signals in the database. 
            det_list, bad_list = qraat.det.det.read_dir(leaf_dir)
                    
            if bad_list: #there are non-readable det files
            
              q_dir = os.path.join(det_q,"{}_{}.{}.{}.{}.{}".format(site,*date_tuple))
              try:
                os.makedirs(q_dir)
              except OSError, e:            # Catch if directory exists;
                if e.errno != errno.EEXIST: # otherwise, throw exception.  
                  raise e
            
              for f in bad_list:
                (status, output) = commands.getstatusoutput("mv {0} {1}".format(f,q_dir))
                if status != 0:
                  print >>sys.stderr, "det_to_db: error: moving {} to quarantine".format(f)
                  print >>sys.stderr, output
                else:
                  print "det_to_db: quarantined {} to {}".format(f,q_dir)
          
            table = qraat.est.est(dets=det_list)
  
            cur = db_con.cursor()
            for row in table: 
              try:
                table.write_db_row(cur, row, site)
                total_det_files+=1
              except Exception as e:
                #could be qraat.ResolveIdError from est class
                #could be MySQLdb.error that we haven't anticipated
                print >>sys.stderr, "det_to_db: warning: skipping est row corresponding to '{0}' due to error from qraat.est.est.write_db_row()".format(row.fn)
                print >>sys.stderr, "det_to_db: error was: {0}".format(e)
                q_dir = os.path.join(det_q,"{}_{}.{}.{}.{}.{}".format(site,*date_tuple))
                try:
                  os.makedirs(q_dir)
                except OSError, e:            # Catch if directory exists;
                  if e.errno != errno.EEXIST: # otherwise, throw exception.  
                    raise e
                (status, output) = commands.getstatusoutput("mv {0} {1}".format(row.fn,q_dir))
                if status != 0:
                  print >>sys.stderr, "det_to_db: error: moving {} to quarantine".format(row.fn)
                  print >>sys.stderr, output
                  
            # Archive table as est file. 
            table.write(os.path.join(est_arch, site, *date_tuple))
          
            # Archive processed det files.
            arch_fn = os.path.join(det_arch, site, *date_tuple)
            try:
              os.makedirs(arch_fn)
            except OSError, e:            # Catch if directory exists;
              if e.errno != errno.EEXIST: # otherwise, throw exception.  
                raise e

            arch_fn += site + (".{}.{}.{}.{}.{}.tar".format(*date_tuple))
            if os.path.isfile(arch_fn): 
              (status, output) = commands.getstatusoutput(
                '/bin/tar -rf {} -C {} .'.format(arch_fn, leaf_dir))
            else: 
              (status, output) = commands.getstatusoutput(
                '/bin/tar -cf {} -C {} .'.format(arch_fn, leaf_dir))

            # Delete processed det files. 
            if status != 0: 
              print >>sys.stderr, "det_to_db: error: archiving {}: {}".format(site, output)
              print >>sys.stderr, output
            else:  
              (status, output) = commands.getstatusoutput('rm -fr {}'.format(leaf_dir))
              if status != 0:
                print >>sys.stderr, "det_to_db: error: deleting {}".format(leaf_dir)
                print >>sys.stderr, output
              else:
                total_directories+=1
          else:#there are some type of file in directory and directory doesn't pass regex
            #quarantine weird thing

            if leaf_dir.startswith(det_dir):
              leaf = leaf_dir[len(det_dir)+1:]#remove det_dir and extra '/'
              if leaf.startswith(site):
                leaf = leaf[len(site)+1:]#remove site and extra '/'
                q_dir = "{}/{}_".format(det_q, site) + '.'.join(leaf.split('/'))
              else:
                q_dir = det_q + '.'.join(leaf.split('/'))
            else:
              q_dir = det_q + '.'.join(leaf_dir.split('/'))
            try:
              os.makedirs(q_dir)
            except OSError, e:            # Catch if directory exists;
              if e.errno != errno.EEXIST: # otherwise, throw exception.  
                raise e
            (status, output) = commands.getstatusoutput("mv {0}/* {1}/".format(leaf_dir,q_dir))
            if status != 0:
              print >>sys.stderr, "det_to_db: error: moving {}/* to quarantine".format(leaf_dir)
              print >>sys.stderr, output
            else:
              print "det_to_db: quarantined {} to {}".format(leaf_dir, q_dir)

        else:#no files or subdirectories, i.e. leaf_dir is empty
          #delete directory
          try:
            os.rmdir(leaf_dir)
          except OSError, e:
            print "Tried to delete {}".format(leaf_dir)
            print e
      #end for loop os.walk
      print "det_to_db: {}: processed {} directories".format(site,directory_counter)
    else: #either no site directory or currently fetching
      print "det_to_db: {}: skipped due to fetching or no data".format(site)
  else:
    print >>sys.stderr, "det_to_db: error: {0} not in database sitelist".format(site)

duration=time.time()-start
print "det_to_db: finished in {0:.2f} seconds.".format(duration)
cur.execute("INSERT INTO processing_statistics (timestamp, duration, process, number_records_input, number_records_output) VALUES (%s, %s, \'det_to_db\', %s, %s)", (int(start), duration, total_directories, total_det_files))
