#!/usr/bin/env python2
# Thus far, this script will only create a valid tx.csv for pulse type 
# transmitters. We'll need to combine the parameter list for all transmitter
# types. 


import qraat, qraat.srv
import argparse
import sys, os

default_type = 'pulse'


parser = argparse.ArgumentParser(description="Produce tx.csv file from database")
parser.add_argument("-f", "--file", help="Path to tx.csv file")
parser.add_argument("-r", "--rise_trigger", type=float, help="Detector rise trigger", default=1.5)
parser.add_argument("-t", "--time_constant", type=float, help="Detector time constant", default=10)
parser.add_argument("-i", "--deploymentID", type=int, help="DeploymentID to include in list") 

args = parser.parse_args()

if args.file is None:
  try:
    args.file = os.environ['RMG_SERVER_TXLIST']
  except KeyError:
    args.file = './tx.csv'

db_con = qraat.srv.util.get_db('reader')

cur = db_con.cursor()

# Transmitters in active deployments
if args.deploymentID is None:
  num_returned = cur.execute('''SELECT deployment.ID, txID, frequency 
                                  FROM deployment
                                  JOIN tx ON tx.ID = txID
                                  JOIN tx_make ON tx_make.ID = tx.tx_makeID
                                 WHERE is_active = True
                                   AND demod_type = %s ''', default_type)
  if (num_returned == 0):
    print "No deployments are active"
    sys.exit(1)
else:
  num_returned = cur.execute('''SELECT deployment.ID, txID, frequency 
                                  FROM deployment
                                  JOIN tx ON tx.ID = txID
                                  JOIN tx_make ON tx_make.ID = tx.tx_makeID
                                 WHERE deployment.ID = %s
                                   AND demod_type = %s ''', (args.deploymentID, default_type))
  if (num_returned == 0):
    print "deploymentID {} not found".format(args.deploymentID)
    sys.exit(1)

tx_dict = {}
for (dep_id, tx_id, frequency) in cur.fetchall():
  tx_dict[tx_id] = { 'frequency' : frequency, 'dep_id' : dep_id }

# Transmitter parameters
cur.execute('''SELECT txID, name, value 
                 FROM tx_parameters
                WHERE txID IN (%s)''' % ', '.join(map(lambda(x) : str(x), 
                                  tx_dict.keys())))
              
for (tx_id, name, value) in cur.fetchall():
  tx_dict[tx_id][name] = value

header = ['ID', 'frequency', 'type', 'pulse_width', 'rise_trigger', 'time_constant']

data = []

for (tx_id, params) in tx_dict.iteritems():
  data.append((params['dep_id'], 
               float(params['frequency']), 
               default_type, 
               float(params['pulse_width']), 
               args.rise_trigger, 
               args.time_constant))

txlist = qraat.csv.csv()
txlist.initialize_from_data(header, data)
txlist.write(args.file)
