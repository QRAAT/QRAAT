#!/usr/bin/perl
#rmg_estcount
#
# This script is part of the QRAAT system.
#
# Copyright (C) 2013 Marcel Losekoot
#
# This script counts how many est files are on the site and at the server.
# It writes the total numbers to a database table estcount.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more estails.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict ;
use warnings ;
use POSIX qw(strftime);
use DBI ;
#use DBD::Wire10 ;				# perl -MCPAN -e shell \r install DBD::Wire10

my $Debug = 0 ;
my $ConnectTimeout = 10 ;

my $TableNameEstCount = "estcount" ;		# The name of the db table
my $TableNameSitelist = "site" ;		# The name of the db table
my $ENV_NAME_RMG_SERVER_EST_DIR = "RMG_SERVER_EST_DIR" ;	# The name of the environment variable where the est directory is defined
my $ENV_NAME_RMG_SITE_EST_DIR = "RMG_SITE_EST_DIR" ;	# The name of the environment variable where the est directory is defined

sub usage()
{
	print "$0: path_to_sitelist authfile [debug]\n" ;
	print "Counts the number of est files present for each site in sitelist\n" ;
	print "Writes data to database account defined in authfile\n" ;
}

sub main()
{
	my $argc = scalar @ARGV ;
	if( $argc < 2 )
	{
		usage() ;
		return 1 ;
	}
	if( ($argc > 2) && ($ARGV[2] eq "debug") )
	{
		$Debug = 1 ;
	}
	my $sitelist = $ARGV[0] ;
	if( (not defined $sitelist) or ($sitelist eq "") )
	{
		print "ERROR: missing parameter for sitelist\n" ;
		return 1 ;
	}
	print "$0: reading sitelist from '$sitelist'\n" ;
	my $rmg_csv = `rmg_csv -c name <$sitelist` ;
	my @sitenames = split(/\n/,$rmg_csv) ;
	if( $Debug ) { print "debug: main: sitenames=@sitenames\n" ; }
	if( scalar @sitenames < 1 )
	{
		print "ERROR: cannot read sitelist\n" ;
		return 1 ;
	}
	#
	# Open database
	my $authfile = $ARGV[1] ;
	if( (not defined $authfile) or ($authfile eq "") )
	{
		print "ERROR: missing parameter for authfile\n" ;
		return 1 ;
	}
	my $dbh = opendatabase($authfile) ;
	if( not defined $dbh )
	{
		#print "ERROR: cannot open database defined in authfile '$authfile'\n" ;
		# opendatabase() already explains the error
		return 1 ;
	}
	#
	# Read the data
	for my $sitename ( @sitenames )
	{
		if( $Debug ) { print "debug: main: sitename=$sitename\n" ; }
		if( (not defined $sitename) or ($sitename eq "") ) { next ; }
		my ( $server_est_count, $site_est_count ) = get_est_count($sitename) ;
		print "$sitename: $server_est_count at server, $site_est_count at site\n" ;
		writetable($dbh,$TableNameEstCount,$sitename,$server_est_count,$site_est_count) ;
	}	
	#
	# Close database
	closedatabase($dbh) ;
	return 0 ;
}

sub get_est_count($)
{
	my ( $sitename ) = @_ ;
	# Server
	my $server_est_count = "" ;
	my $server_estdir = $ENV{$ENV_NAME_RMG_SERVER_EST_DIR} ;
	my $command = "find $server_estdir/$sitename -type f -iname \"*.est\" | wc -l" ;
	if( $Debug ) { print "debug: get_est_count: server command=$command\n" ; }
	my $result = `$command` ;
	chomp($result) ;
	if( $Debug ) { print "debug: get_est_count: server result=$result\n" ; }
	if( defined $result ) { $server_est_count = $result ; }
	# Site
	my $site_est_count = "" ;
	#my $site_estdir = $ENV{$ENV_NAME_RMG_SITE_EST_DIR} ;
	#$command = "ssh -o ConnectTimeout=$ConnectTimeout $sitename 'find $site_estdir -type f -iname \"*.est\" | wc -l'" ;
	#if( $Debug ) { print "debug: get_est_count: site command=$command\n" ; }
	#$result = `$command` ;
	#chomp($result) ;
	#if( $Debug ) { print "debug: get_est_count: site result=$result\n" ; }
	#if( defined $result ) { $site_est_count = $result ; }
	return ( $server_est_count, $site_est_count ) ;
}

sub opendatabase($)	# connects to the database and returns the database handle
{
	my ( $authfile ) = @_ ;
	my $fd ;
	if( not defined open($fd,"<".$authfile) )
	{
		print "ERROR: cannot open authfile '$authfile'\n" ;
		return undef ;
	}
	my $host = <$fd> ;
	chomp($host) ;
	my $user = <$fd> ;
	chomp($user) ;
	my $pass = <$fd> ;
	chomp($pass) ;
	my $database = <$fd> ;
	chomp($database) ;
	if( not defined $user or $user eq "" )
	{
		print "ERROR: cannot read user from authfile '$authfile'\n" ;
		return undef ;
	}
	if( not defined $pass or $pass eq "")
	{
		print "ERROR: cannot read pass from authfile '$authfile'\n" ;
		return undef ;
	}
	if( not defined $host or $host eq "" )
	{
		print "ERROR: cannot read host from authfile '$authfile'\n" ;
		return undef ;
	}
	if( not defined $database or $database eq "" )
	{
		print "ERROR: cannot read database from authfile '$authfile'\n" ;
		return undef ;
	}
	close($fd) ;
	my $port = 3306 ;
	my $timeout = 10 ;
	#my $dsn = "dbi:mysql:$database" ;
	#my $dsn = "DBI:Wire10:database=$database;host=$host;port=$port;mysql_connect_timeout=$timeout" ;
	my $dsn = "DBI:mysql:database=$database;host=$host;port=$port;mysql_connect_timeout=$timeout" ;
	my $dbh = DBI->connect($dsn,$user,$pass) ;
	if( not $dbh )
	{
		print "ERROR: cannot connect to database host: $DBI::errstr\n" ;
		return undef ;
	}
	return $dbh ;
}

sub writetable($$$$$)
{
	my ( $dbh, $tablename, $sitename, $server_est_count, $site_est_count ) = @_ ;
	# Get the site number from the sitename table
	my $query = "select id from $TableNameSitelist where name='${sitename}' ;" ;
	if( $Debug ) { print "debug: writetable: query=$query\n" ; }
	my $result = dblookup($dbh,$query) ;
	if( not defined $result or ($result eq "") )
	{
		if( $Debug ) { print "debug: writetable: cannot find site code for site '$sitename'\n" ; }
		return 1 ;
	}
	my $site = $result ;
	if( $Debug ) { print "debug: writetable: site code for site '$sitename' is $site\n" ; }
	my $timestamp = time() ;
	$query = "insert into $tablename (siteid,datetime,timezone,timestamp,server,site) values(" ;	# setup column names
	$query .= "'${site}'" ;				# next is the site ID value, from the above query
	$query .= strftime ",'%Y-%m-%d %H:%M:%S','UTC'", gmtime($timestamp);	# next, the datetime and timezone
	$query .= ",'$timestamp'" ;				# and the unix time
	if( (not defined $server_est_count) or ($server_est_count eq "") )
	{
		$query .= ",NULL" ;
	}
	else
	{
		$query .= ",'$server_est_count'" ;
	}
	if( (not defined $site_est_count) or ($site_est_count eq "") )
	{
		$query .= ",NULL" ;
	}
	else
	{
		$query .= ",'$site_est_count'" ;
	}
	$query .= ") ;" ;
	if( $Debug ) { print "debug: updatetable: query=$query\n" ; }
	if( dbexecute($dbh,$query) )
	{
		print "ERROR: cannot add entry to table '$tablename'\n" ;
		return 1 ;
	}
	return 0 ;
}

sub dblookup($$)
{
	#
	# Executes the given query to return one value, or undef
	my ( $dbh, $query ) = @_ ;
	my $sth = $dbh->prepare($query) ;
	if( not $sth )
	{
		print "ERROR: cannot prepare query: $DBI::errstr Query='$query'\n" ;
		return undef ;
	}
	if( not $sth->execute() )
	{
		print "ERROR: cannot execute query: $DBI::errstr Query='$query'\n" ;
		return undef ;
	}
	my $matches = $sth->rows() ;
	if( not $matches )
	{
		return undef ;
	}
	my $ref_row = $sth->fetchrow_arrayref ;
	if( not defined($ref_row) )
	{
		return undef ;
	}
	return $ref_row->[0] ;
}

sub dbexecute($$)		# executes a given query, returns 0 for OK, 1 for error
{
	my ( $dbh, $query ) = @_ ;
	my $sth = $dbh->prepare($query) ;
	if( not $sth )
	{
		print "ERROR: cannot prepare query: $DBI::errstr Query='$query'\n" ;
		return 1 ;
	}
	if( not $sth->execute() )
	{
		print "ERROR: cannot execute query: $DBI::errstr Query='$query'\n" ;
		return 1 ;
	}
	return 0 ;
}

sub closedatabase($)
{
	my ( $dbh ) = @_ ;
	if( not $dbh->disconnect() )
	{
		print "ERROR: cannot close database: $DBI::errstr\n" ;
	}
}

exit main() ;

#END
