#!/usr/bin/python2
# rmg_filter_auto
# Script to call for time filtering things that haven't been time filtered yet.
# This program is part of QRAAT, an automated animal tracking system based on
# GNU Radio. 
#
# Copyright (C) 2013 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from math import ceil
import qraat
import qraat.srv
import time, os, sys, commands
import MySQLdb as mdb
from optparse import OptionParser

# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "template: error: attempted reentry, exiting"
  sys.exit(1)

parser = OptionParser()

parser.description = '''This does nothing.'''
parser.add_option('-s', '--siteid', action='store', type='int', dest='siteid')
parser.add_option('-t', '--txid', action='store', type='int', dest='txid')
# parser.add_option('-a', '--t_start', action='store', type='int', dest='t_start')
# parser.add_option('-z', '--t_end', action='store', type='int', dest='t_end')

(options, args) = parser.parse_args()

try: 
  start = time.time()
  print "template: start time:", time.asctime(time.localtime(start))

  # db_con = qraat.util.get_db('reader')

  change_handler = qraat.srv.signal_filter.init_change_handler()
  db_con = change_handler.obj

  context_length = 3 * 60

  chunk_size = int(60 * 60)		# One hour (in seconds)

  # t_start, t_end = options.t_start, options.t_end

  siteid, txid = options.siteid, options.txid

  # FIXME This commented out stuff came up in a merge fix. Shouldn't be a problem. 
  # total_chunks = int((t_end - t_start) / float(chunk_size)) + 1
  # start_times = [(t_start + (i * chunk_size)) for i in range(total_chunks)]
  # intervals = [(x, min(t_end, x + chunk_size)) for x in start_times]
  # change_handler = qraat.srv.signal_filter.init_change_handler()
  # for start, end in intervals:
    # print '{} - {}'.format(start, end)
    # Get all unscored IDs in this chunk

    # q = 'select t.ID from estscore RIGHT JOIN (select ID from est where siteid = %s and txid = %s and timestamp >= %s and timestamp <= %s) as t ON t.ID = estscore.estid where estscore.estid IS NULL;'

	# cursor_val = qraat.srv.signal_filter.get_current_cursor_value(db_con)
    # q = 'select ID from est where siteid = %s and txid = %s and 

    # initialize cursor table entry if it does not exist - wait! no need!
    # print 'Initializing cursor table now...'
    # change_handler.add_sql('INSERT IGNORE INTO `cursor` (value, name) values ( , ('estscore',))

  cursor_value = qraat.srv.signal_filter.get_cursor_value(change_handler, 'estscore')
  print 'Got cursor_value:', cursor_value

  q = 'select ID from est where siteid = %s and txid = %s and ID > %s'


  cur = db_con.cursor()
  rows = cur.execute(q, (siteid, txid, cursor_value))
  l = []
  while True:
    r = cur.fetchone()
    if r is None: break
    r = tuple(r)
    l.append(r[0])
    print 'Got {} items: {}'.format(len(l), l[:10])

  if len(l) == 0:
    print 'No IDs to process.'
  else:
    print 'Here goes.'
    # Split into groups of 1000 each?
    batch_size = 1000
    max_range_float = len(l) / float(batch_size)
    max_range = ceil(max_range_float)
    for i in range(int(max_range)):
      sub_l = l[i * batch_size:(i + 1) * batch_size]
      qraat.srv.signal_filter.score(sub_l)
      print 'Done scoring.'
      print 'About to update cursor "{}" to {}'.format('estscore', max(l))
      qraat.srv.signal_filter.update_cursor_value(change_handler, 'estscore', max(l))
    
except mdb.Error, e:
  print >>sys.stderr, "template: error: [%d] %s" % (e.args[0], e.args[1])
  sys.exit(1)

except qraat.error.QraatError, e:
  print >>sys.stderr, "template: error: %s." % e

finally: 
  print "template: finished in %.2f seconds." % (time.time() - start)
