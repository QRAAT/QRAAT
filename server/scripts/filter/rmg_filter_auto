#!/usr/bin/python2
# rmg_filter_auto
# Script to call for time filtering things that haven't been time filtered yet.
# This program is part of QRAAT, an automated animal tracking system based on
# GNU Radio. 
#
# Copyright (C) 2014 Sean Riddle
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from math import ceil
import qraat
import qraat.srv
import time, os, sys, commands
import MySQLdb as mdb
from optparse import OptionParser

# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "filter_auto: error: attempted reentry, exiting"
  sys.exit(1)

try: 
  start = time.time()
  print "filter_auto: start time:", time.asctime(time.localtime(start))
  
  db_con = qraat.util.get_db('writer')

  cur = db_con.cursor()
  cur.execute('SELECT value FROM `cursor` WHERE name=\'estscore\'')
  last_processed = cur.fetchone()
  if last_processed == None:
    last_processed = 0
    cur.execute('INSERT INTO `cursor` (name, value) VALUE (%s, %s)', 
                                                       ('estscore', 0,))
  else: (last_processed,) = last_processed
  print "filter_auto: cursor at est.ID=%d" % last_processed

  # Get a set of (dep_id, site_id) pairs for which there is new data. 
  cur.execute('''SELECT DISTINCT deploymentID, siteID 
                   FROM est 
                  WHERE ID > %s''', (last_processed)) 
  
  qraat.srv.signal.VERBOSE = True
  
  bad = False; chunks = []
  for (dep_id, site_id) in cur.fetchall(): 
    cur.execute('''SELECT min(timestamp), max(timestamp) 
                     FROM qraat.est
                    WHERE ID > %s 
                      AND deploymentID = %s
                      AND siteID = %s''', (last_processed, dep_id, site_id,))
    (t_start, t_end) = cur.fetchone()

    if (t_end - t_start) < qraat.srv.signal.SCORE_INTERVAL: 
      print "filter_auto: incomplete score interval (depID=%d, siteID=%d)" % (dep_id, site_id)
      bad = True

    else: chunks.append((dep_id, site_id, t_start, t_end))
  
  if bad: 
    print "filter_auto: skipping processing until all intervals are caught up." 

  else: 
    max_id = last_processed
    for (dep_id, site_id, t_start, t_end) in chunks: 
      print "filter_auto: depID=%d, siteID=%d" % (dep_id, site_id)
      (total, id) = qraat.srv.signal.Filter(db_con, dep_id, site_id, t_start, t_end)
      max_id = id if max_id < id else max_id
      print "filter: scored %d pulses." % total

    cur.execute('UPDATE `cursor` SET value=%s WHERE name=\'estscore\'', (max_id,))
    print "filter_auto: updated cursor to est.ID=%d." % max_id 


except mdb.Error, e:
  print >>sys.stderr, "filter_auto: error: [%d] %s" % (e.args[0], e.args[1])
  sys.exit(1)

except qraat.error.QraatError, e:
  print >>sys.stderr, "filter_auto: error: %s." % e

finally: 
  print "filter_auto: finished in %.2f seconds." % (time.time() - start)
