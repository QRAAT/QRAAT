#!/usr/bin/env python2
# rmg_sitefilter_auto
# Script to call for time filtering things that haven't been time filtered yet.
# This program is part of QRAAT, an automated animal tracking system based on
# GNU Radio. 
#
# Copyright (C) 2014 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import qraat.srv
import time, sys, commands
import numpy as np



EST_THROTTLE=50000
time_window=60#from signal.py

# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "filter_auto: error: attempted reentry, exiting"
  sys.exit(1)

try: 
  start = time.time()
  print "filter_auto: start time:", time.asctime(time.localtime(start))
  
  db_con = qraat.srv.util.get_db('writer')

  cur = db_con.cursor()
  cur.execute('SELECT value FROM `processing_cursor` WHERE name=\'estscore\'')
  last_processed = cur.fetchone()
  if last_processed == None:
    print >>sys.stderr, "filter_auto: error: missing DB cursor." 
    sys.exit(1) 

  else: 
    (last_processed,) = last_processed
    print "filter_auto: processing_cursor at est.ID=%d" % last_processed
  
  cur.execute('SELECT UNIX_TIMESTAMP(NOW())')
  (now,) = cur.fetchone(); 
  now = now - (now % qraat.srv.signal.SCORE_INTERVAL)
  now += qraat.srv.signal.SCORE_NEIGHBORHOOD / 2

  # Get a set of (dep_id, site_id) pairs for which there is new data, 
  # excluding the latest incomplete chunk. 
  num_dep = cur.execute('''SELECT DISTINCT deploymentID
                   FROM est 
                  WHERE ID > %s 
                    AND ID <= %s
                    AND timestamp < %s''', (last_processed, last_processed+EST_THROTTLE, now)) 
  
  qraat.srv.signal.VERBOSE = False
  max_id = last_processed
  if num_dep > 0:  
    for (dep_id,) in cur.fetchall(): 
      cur.execute('''SELECT timestamp
                     FROM est 
                    WHERE ID > %s
                      AND ID <= %s 
                      AND timestamp < %s
                      AND deploymentID = %s
                 ORDER BY timestamp ASC''', (last_processed, last_processed+EST_THROTTLE, now, dep_id)) 
      times = np.array(cur.fetchall(),dtype=float)
      #determine time range needed to be processed
      #time_ranges is a list of tuples determining the start and stop of a time_range
      #a time_range is a block of contiguous time_windows over which there is a signal
      time_ranges = []
      if times.shape[0] > 0:
        temp_range = [times[0,0], times[0,0]]
        for j in range(1,times.shape[0]):
          if times[j,0] - time_window < temp_range[1] + time_window:
            temp_range[1] = times[j,0]
          else:
            time_ranges.append(temp_range)
            temp_range = [times[j,0], times[j,0]]
        time_ranges.append(temp_range)

    #(t_start, t_end) = cur.fetchone() 
      for (t_start,t_end) in time_ranges:
        print "filter_auto: depID={},start_time={},end_time={}".format(dep_id,t_start,t_end)
        (total, id) = qraat.srv.signal.Filter(db_con, dep_id, t_start, t_end)
        if id > max_id:
          if id < last_processed+EST_THROTTLE:
            max_id = id
          else:
            max_id = last_processed+EST_THROTTLE        
        print "filter: scored %d pulses." % total

  cur.execute('UPDATE `processing_cursor` SET value=%s WHERE name=\'estscore\'', 
                                                (max_id,))
  print "filter_auto: updated processing_cursor to est.ID=%d." % max_id 
  

#except mdb.Error, e:
#  print >>sys.stderr, "filter_auto: error: [%d] %s" % (e.args[0], e.args[1])
#  sys.exit(1)

#except qraat.error.QraatError, e:
#  print >>sys.stderr, "filter_auto: error: %s." % e
except:
  raise

finally: 
  print "filter_auto: finished in %.2f seconds." % (time.time() - start)
