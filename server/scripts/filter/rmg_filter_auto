#!/usr/bin/python2
# rmg_filter_auto
# Script to call for time filtering things that haven't been time filtered yet.
# This program is part of QRAAT, an automated animal tracking system based on
# GNU Radio. 
#
# Copyright (C) 2014 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from math import ceil
import qraat
import qraat.srv
import time, os, sys, commands
import MySQLdb as mdb
from optparse import OptionParser

# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "filter_auto: error: attempted reentry, exiting"
  sys.exit(1)

try: 
  start = time.time()
  print "filter_auto: start time:", time.asctime(time.localtime(start))
  
  db_con = qraat.util.get_db('writer')

  cur = db_con.cursor()
  cur.execute('SELECT value FROM `processing_cursor` WHERE name=\'estscore\'')
  last_processed = cur.fetchone()
  if last_processed == None:
    print >>sys.stderr, "filter_auto: error: missing DB cursor." 
    sys.exit(1) 

  else: 
    (last_processed,) = last_processed
    print "filter_auto: processing_cursor at est.ID=%d" % last_processed
  
  cur.execute('SELECT UNIX_TIMESTAMP(NOW())'); (now,) = cur.fetchone(); 
  now = now - (now % qraat.srv.signal.SCORE_INTERVAL)
  now += qraat.srv.signal.SCORE_NEIGHBORHOOD / 2

  # Get a set of (dep_id, site_id) pairs for which there is new data, 
  # excluding the latest incomplete chunk. 
  cur.execute('''SELECT DISTINCT deploymentID, 
                                 siteID
                   FROM est 
                  WHERE ID > %s 
                    AND timestamp < %s''', (last_processed, now)) 
  
  qraat.srv.signal.VERBOSE = True
  max_id = last_processed
  
  for (dep_id, site_id) in cur.fetchall(): 
    cur.execute('''SELECT min(timestamp), max(timestamp)
                     FROM est 
                    WHERE ID > %s 
                      AND timestamp < %s
                      AND deploymentID = %s
                      AND siteID = %s''', (last_processed, now, dep_id, site_id)) 
    (t_start, t_end) = cur.fetchone() 

    if dep_id is not None: 
      print "filter_auto: depID=%d, siteID=%d" % (dep_id, site_id)
      (total, id) = qraat.srv.signal.Filter(db_con, dep_id, site_id, t_start, t_end)
      max_id = id if max_id < id else max_id
      print "filter: scored %d pulses." % total

  cur.execute('UPDATE `processing_cursor` SET value=%s WHERE name=\'estscore\'', 
                                                (max_id,))
  print "filter_auto: updated processing_cursor to est.ID=%d." % max_id 
  

except mdb.Error, e:
  print >>sys.stderr, "filter_auto: error: [%d] %s" % (e.args[0], e.args[1])
  sys.exit(1)

except qraat.error.QraatError, e:
  print >>sys.stderr, "filter_auto: error: %s." % e

finally: 
  print "filter_auto: finished in %.2f seconds." % (time.time() - start)
