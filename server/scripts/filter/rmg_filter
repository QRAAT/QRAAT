#!/usr/bin/python2
# rmg_template
# Time filters a range of points specified by a starting and ending UNIX
# timestamp.  This program is part of QRAAT, an automated animal tracking
# system based on GNU Radio. 
#
# Copyright (C) 2013 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import qraat
import time, os, sys, commands
import MySQLdb as mdb
from optparse import OptionParser

import qraat.signal_filter

# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "template: error: attempted reentry, exiting"
  sys.exit(1)

parser = OptionParser()

parser.description = '''This does nothing.'''
parser.add_option('-s', '--siteid', action='store', type='int', dest='siteid')
parser.add_option('-t', '--txid', action='store', type='int', dest='txid')
parser.add_option('-a', '--t_start', action='store', type='int', dest='t_start')
parser.add_option('-z', '--t_end', action='store', type='int', dest='t_end')

(options, args) = parser.parse_args()

try: 
  start = time.time()
  print "template: start time:", time.asctime(time.localtime(start))

  db_con = qraat.util.get_db('reader')

  chunk_size = int(60 * 60)		# One hour (in seconds)

  t_start, t_end = options.t_start, options.t_end

  siteid, txid = options.siteid, options.txid

  total_chunks = int((t_end - t_start) / float(chunk_size)) + 1
  start_times = [(t_start + (i * chunk_size)) for i in range(total_chunks)]
  intervals = [(x, min(t_end, x + chunk_size)) for x in start_times]
  change_handler = qraat.signal_filter.init_change_handler()
  for start, end in intervals:
    q = 'select t.ID from estscore RIGHT JOIN (select ID from est where siteid = %s and txid = %s and timestamp >= %s and timestamp <= %s) as t ON t.ID = estscore.estid where estscore.estid IS NULL;'
    # cursor query:
    # q = 'insert into `cursor` (name, value) values (%s, 1)'

    cur = change_handler.add_sql(q, (siteid, txid, start, end))

    l = []
    while True:
      r = cur.fetchone()
      if r is None: break
      r = tuple(r)
      l.append(r[0])

    print 'Got {} items: {}'.format(len(l), l[:10])

    if len(l) == 0:
      print 'No IDs to process.'
    else:
      print 'Here goes.'
      qraat.signal_filter.score(l)
      print 'Done.'
    
except mdb.Error, e:
  print >>sys.stderr, "template: error: [%d] %s" % (e.args[0], e.args[1])
  sys.exit(1)

except qraat.error.QraatError, e:
  print >>sys.stderr, "template: error: %s." % e

finally: 
  print "template: finished in %.2f seconds." % (time.time() - start)
