#!/usr/bin/python2
# rmg_filter
# Time filters a range of points specified by a starting and ending UNIX
# timestamp.  This program is part of QRAAT, an automated animal tracking
# system based on GNU Radio. 
#
# Copyright (C) 2014 Sean Riddle
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import qraat, qraat.srv
import time, os, sys, commands
import MySQLdb as mdb
import traceback
from optparse import OptionParser
    
# Right now this rescores points within time range *only* when a score has
# not already been computed. Could change this to delete all those scores
# (and interval_cache values) and then not do a join filter. But what we do
# not want, I'm pretty sure, is more than one score per point.
score_query = '''SELECT t.ID FROM estscore 
             RIGHT JOIN (SELECT ID 
                           FROM est 
                          WHERE siteID = %s 
                            AND deploymentID = %s 
                            AND timestamp >= %s 
                            AND timestamp <= %s) 
                     AS t ON t.ID = estscore.estID 
                  WHERE estscore.estid IS NULL;'''
# cursor query:
# q = 'insert into `cursor` (name, value) values (%s, 1)'


# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "filter: error: attempted reentry, exiting"
  sys.exit(1)

parser = OptionParser()

parser.description = '''This does nothing.'''
parser.add_option('-s', '--site-id', action='store', type='int')
parser.add_option('-t', '--dep-id', action='store', type='int')
parser.add_option('-a', '--t-start', action='store', type='int')
parser.add_option('-z', '--t-end', action='store', type='int')

(options, args) = parser.parse_args()

try: 
  start = time.time()
  print "filter: start time:", time.asctime(time.localtime(start))

  db_con = qraat.util.get_db('reader')

  chunk_size = int(60 * 60)		# One hour (in seconds)

  t_start, t_end = options.t_start, options.t_end
  site_id, dep_id = options.site_id, options.dep_id

  total_chunks = int((t_end - t_start) / float(chunk_size)) + 1
  start_times = [(t_start + (i * chunk_size)) for i in range(total_chunks)]
  intervals = [(x, min(t_end, x + chunk_size)) for x in start_times]
  print 'There are {} intervals'.format(len(intervals))
  change_handler = qraat.srv.signal_filter.init_change_handler()
  
  for chunk_start, chunk_end in intervals:

    cur = change_handler.add_sql(score_query, (site_id, dep_id, chunk_start, chunk_end))

    l = []
    while True:
      r = cur.fetchone()
      if r is None: break
      r = tuple(r)
      l.append(r[0])

    #print 'Got {} items: {}'.format(len(l), l[:10])

    if len(l) > 0:
      qraat.srv.signal_filter.score(l)
  

except mdb.Error, e:
  print >>sys.stderr, "filter: eror: [%d] %s" % (e.args[0], e.args[1])
  #with open('/home/qraat/error.log', 'w') as f:
  #  traceback.print_exc(file=f)
  #  for k, vs in qraat.srv.signal_filter.reasoning.items():
  #    f.write(str(k) + '\n')
  #    for v in vs:
  #      f.write('\t*' + str(v) + '\n')
  #  f.write('len of reasoning:' + str(len(qraat.srv.signal_filter.reasoning)) + '\n')
  # sys.exit(1)

except qraat.error.QraatError, e:
  print >>sys.stderr, "filter: error: %s." % e

finally: 
  print "filter: finished in %.2f seconds." % (time.time() - start)
