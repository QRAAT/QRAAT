#!/usr/bin/python
# rmg_filter
# Template for writing scripts. This program is part of QRAAT, 
# an automated animal tracking system based on GNU Radio. 
#
# Copyright (C) 2013 Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import qraat, qraat.srv
import time, os, sys, commands
import MySQLdb as mdb
from optparse import OptionParser

# Check for running instances of this program. 
(status, output) = commands.getstatusoutput(
  'pgrep -c `basename %s`' % (sys.argv[0]))
if int(output) > 1: 
  print >>sys.stderr, "filter: error: attempted reentry, exiting"
  sys.exit(1)

parser = OptionParser()

parser.description = '''Per site and transmitter signal filter.'''
parser.add_option('--site-id', action='store', type='int', default=2)
parser.add_option('--dep-id', action='store', type='int', default=51)
parser.add_option('--t-start', action='store', type='float', default=1376427421)
parser.add_option('--t-end', action='store', type='float', default=1376434446)


(options, args) = parser.parse_args()

try: 
  start = time.time()
  print "filter: start time:", time.asctime(time.localtime(start))

  db_con = qraat.util.get_db('writer')
  qraat.srv.signal.VERBOSE = True

  total = qraat.srv.signal.Filter(db_con,
                                  options.dep_id, 
                                  options.site_id,
                                  options.t_start,
                                  options.t_end)

  print "filter: scored %d pulses." % total
  
except mdb.Error, e:
  print >>sys.stderr, "filter: error: [%d] %s" % (e.args[0], e.args[1])
  sys.exit(1)

except qraat.error.QraatError, e:
  print >>sys.stderr, "filter: error: %s." % e

finally: 
  print "filter: finished in %.2f seconds." % (time.time() - start)
