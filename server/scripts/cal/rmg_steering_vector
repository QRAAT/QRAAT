#!/usr/bin/env python2
# rmg_steering_vector
# Calculate the steering vectors for a certain site and 
# calibration run. Inputs a cal run (join on True_Position
# and est) and outputs to Steering_Vectors. This program 
# is part of QRAAT, an utomated animal tracking system 
# based on GNU Radio. 
#
# Copyright (C) 2013 Todd Borrowman, Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import qraat
import MySQLdb as mdb
import time, os, sys
import numpy as np
import matplotlib.pyplot as pp
from optparse import OptionParser

parser = OptionParser()

parser.description = '''\
Calculate the steering vectors for a specified calibration run and 
receiver site. This data is used to estimate the bearing of a 
transmitter from the receiving tower.'''

parser.add_option('--cal-id', type='int', metavar='INT',
                  help="Calibration ID, the serial identifier in the database "
                       "context identifying a calibration run.")

parser.add_option('--site-id', type='int', metavar='INT',
                  help="Site ID, the serial identifier in the database "
                       "context identifying an antenna receiver site.")

parser.add_option('--avg-span', type='int', metavar='INT', default=5,
                  help="Size of the averaging window for the steering vector "
                       "calculation (default is 5).")

parser.add_option('--plot', action='store_true', default=False, 
                  help="Show plot of the steering vectors.")
                  
(options, args) = parser.parse_args()

if options.cal_id == None:
  print >>sys.stderr, "steering_vector: erorr: provide a calibration ID via `--cal-id`."
  sys.exit(1)

if options.site_id == None:
  print >>sys.stderr, "steering_vector: erorr: provide a site ID via `--site-id`."
  sys.exit(1)

# Get database credentials.
try: 
  db_config = qraat.csv.csv("%s/db_auth" % os.environ['RMG_SERVER_DIR']).get(view='writer')

except KeyError: 
  print >>sys.stderr, "steering_vector: error: undefined environment variables. Try `source rmg_env.`" 
  sys.exit(1) 

except IOError, e: 
  print >>sys.stderr, "steering_vector: error: missing DB credential file '%s'." % e.filename
  sys.exit(1)

try: 
  start = time.time()
  print "steering_vector: start time:", time.asctime(time.localtime(start))

  db_con = mdb.connect(db_config.host, 
                       db_config.user,
                       db_config.password,
                       db_config.name)
  cur = db_con.cursor()

  cur.execute('SELECT name FROM site WHERE ID = %d' % options.site_id)
  site_name = cur.fetchone()
  if site_name == None:
    print >>sys.stderr, 'steering_vector: error: no entry for '\
                        'site ID #%d in the database.' % (options.site_id)
    sys.exit(1)
  else: site_name = site_name[0]
  
  # Delete steering vectors if they already exist. 
  cur.execute('''SELECT COUNT(*)
                   FROM steering_vectors
                  WHERE siteID = %d 
                    AND cal_infoID = %d''' % (options.site_id, 
                                              options.cal_id))
  if cur.fetchone()[0] > 0: 
    print >>sys.stderr, ("steering_vector: warning: database already contains data for the "
                         "specified cal run and site. Would you like to replace it? [y,n] "), 
    if raw_input().strip() in ['y', 'Y', 'yes', 'YES']: 
      cur.execute('''DELETE FROM steering_vectors 
                      WHERE siteID = %d
                        AND cal_infoID = %d''' % (options.site_id, 
                                                  options.cal_id))
    else:
      print >>sys.stderr, "steering_vector: exiting."
      sys.exit(0)
  

  # get cal data per site from the database. 
  cur.execute('''SELECT true_position.bearing, 
                        est.edsp, 
                        est.ed1r, est.ed1i, est.ed2r, est.ed2i, est.ed3r, est.ed3i, est.ed4r, est.ed4i, 
                        est.frequency, 
                        est.band10, 
                        est.timestamp 
                   FROM true_position, est, calibration_information
                  WHERE true_position.estID = est.ID 
                    AND est.siteid=%s
                    AND calibration_information.ID=%s
                    AND calibration_information.deploymentID=est.deploymentID
                ''',(options.site_id, options.cal_id))

  cal_data = np.array(cur.fetchall())

  print "steering_vector: %s: calculating" % site_name
  # calculate pulse values
  cal_real_signals = np.array(cal_data[:,2:10],dtype=float)
  cal_signals = cal_real_signals[:,::2] + np.complex(0,1) * cal_real_signals[:,1::2]

  # generate signals with zero phase on antenna 1
  cal_spherical_signals = np.zeros(cal_real_signals.shape)
  cal_spherical_signals[:,0] = np.arctan2(cal_real_signals[:,1], cal_real_signals[:,0])
  cal_phase0_signals = np.exp(np.complex(0,-1)*np.dot(np.angle(cal_signals[:,0:1]),np.ones((1,4)))) * cal_signals

  # average signal over bearing
  steering_vectors = np.zeros((0,4), np.complex)
  bearings = np.zeros((0,))
  for j in range(360):
    temp_bearings = (cal_data[:,0] - j + options.avg_span/2 + 360*5) % 360
    temp_mask = temp_bearings < options.avg_span
    if np.sum(temp_mask) > 0:
      bearings = np.hstack((bearings, [j,]))
      temp_matrix = np.dot(np.transpose(np.conj(cal_phase0_signals[temp_mask, :])),cal_phase0_signals[temp_mask, :])
      (w,v) = np.linalg.eigh(temp_matrix)
      steering_vectors = np.vstack((steering_vectors, v[np.newaxis,:,np.argmax(w)]))

  print "steering_vector: %s: verifying" % site_name
  # Verify 
  sv_bearing = np.zeros((cal_signals.shape[0],))
  for j in range(cal_signals.shape[0]):
    temp_signal = np.conj(cal_signals[j,np.newaxis,:])
    temp_sv = np.zeros((bearings.shape[0],))
    for k in range(bearings.shape[0]):
      temp_sv[k] = np.dot(temp_signal, np.dot( np.dot( 
        np.transpose( np.conj( steering_vectors[k,np.newaxis,:] )), 
        steering_vectors[k,np.newaxis,:] ), np.transpose(np.conj(temp_signal)) ))[0,0].real
    sv_bearing[j] = bearings[np.argmax(temp_sv)]


  # Insert steering vectors into the database. 
  cur.executemany('''INSERT INTO steering_vectors 
                      (cal_infoID, siteID, bearing, 
                       sv1r, sv1i, sv2r, sv2i, 
                       sv3r, sv3i, sv4r, sv4i) 
                     VALUES (%s, %s, %s, 
                             %s, %s, %s, %s, 
                             %s, %s, %s, %s)''', 
                             
    [ ( options.cal_id, options.site_id, bearings[j], 
        steering_vectors[j,0].real, steering_vectors[j,0].imag,
        steering_vectors[j,1].real, steering_vectors[j,1].imag,
        steering_vectors[j,2].real, steering_vectors[j,2].imag,
        steering_vectors[j,3].real, steering_vectors[j,3].imag ) 
      for j in range(bearings.shape[0]) ]
  )

  db_con.close()

  if options.plot:
    true_bearing = np.array(cal_data[:,0],dtype=float)
    true_bearing += 360*(true_bearing < 0)
    pp.plot(cal_data[:,12],sv_bearing,'.')
    pp.plot(cal_data[:,12],true_bearing,'k.')
    pp.xlabel("Timestamp (seconds)")
    pp.ylabel("Bearing (Degrees)")
    pp.title("Bearing estimate for {}".format(site_name))
    pp.show()

except mdb.Error, e:
  print >>sys.stderr, "steering_vector: error: [%d] %s" % (e.args[0], e.args[1])
  sys.exit(1)

finally: 
  print "steering_vector: finished in %.2f seconds." % (time.time() - start)
