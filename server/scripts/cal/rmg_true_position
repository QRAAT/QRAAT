#!/usr/bin/env python2
# rmg_true_position
# Interpolate GPS and pulse data for a calibration run and calculate 
# a bearing for each time indexed pulse per site. Inputs from 
# qraat.GPS_Calibration_Data and qraat.est, outputs to 
# qraat.True_Position. This program is part of QRAAT, an automated 
# animal tracking system based on GNU Radio. 
#
# In any case, the resulting bearing seems to be consistent. 
#
# Copyright (C) 2013 Todd Borrowman, Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import qraat.srv
import qraat.csv
import time, sys
import numpy as np
from argparse import ArgumentParser

program_description = '''\
Interpolate GPS and pulse data and calculate a bearing for each 
time indexed pulse per site for a calibration run. This program is part of
QRAAT, an automated animal tracking system based on GNU Radio.   
'''

parser = ArgumentParser(description=program_description)
parser.add_argument('dep_id',type=int, help="Deployment ID, the serial identifier in the database context identifying a calibration run.")
parser.add_argument('--sitecsv', type=str, help="CSV file with alternative site locations")
options = parser.parse_args()


# Get database credentials.
db_con = qraat.srv.util.get_db('writer')


start = time.time()
print "true_position: start time:", time.asctime(time.localtime(start))

# Connect to the database. 
cur = db_con.cursor()

# Get GPS data for calibration run. 
if not cur.execute("SELECT timestamp, easting, northing, elevation FROM gps_data WHERE deploymentID = %s", options.dep_id):
  print >>sys.stderr, "true_position: error: no GPS data found for specified deployment."
  sys.exit(1)

gps_data = np.array(cur.fetchall(), dtype=float)
gps_timestamp = gps_data[:,0]
gps_easting = gps_data[:,1]
gps_northing = gps_data[:,2]
gps_elevation = gps_data[:,3]

# Get start and end times. 
(t_start, t_end) = min(gps_data[:,0]), max(gps_data[:,0])

print "true_position: getting site data"
if options.sitecsv is None:
  cur.execute("SELECT ID, easting, northing, elevation from site")
  site_data = np.array(cur.fetchall(), dtype=float)
else:
  site_csv = qraat.csv.csv(fn=options.sitecsv)
  site_data = np.zeros((len(site_csv),4), dtype=float)
  index = 0
  for row in site_csv:
    #format of output from qraat.srv.gps.gpx_waypoints.write_csv()
    site_data[index,:] = [row.ID, row.__dict__[' Easting'], row.__dict__[' Northing'], row.__dict__[' Elevation']]
    index += 1


print "true_position: getting est data ..."
cur.execute('''SELECT timestamp, ID, siteID 
                   FROM est 
                  WHERE deploymentID=%s 
                    AND timestamp >= %s 
                    AND timestamp <= %s''',(options.dep_id, t_start, t_end))

est_data = np.array(cur.fetchall(), dtype=float)
ct = est_data.shape[0]
est_timestamp = est_data[:,0]
est_ID = est_data[:,1]
est_siteid = est_data[:,2]
print "processing {} records.".format(ct)

if ct > 0: 

  # calculate pulse position from time, linear interpolation 
  est_easting = np.interp(est_timestamp, gps_timestamp, gps_easting)
  est_northing = np.interp(est_timestamp, gps_timestamp, gps_northing)
  est_elevation = np.interp(est_timestamp, gps_timestamp, gps_elevation)

  site_easting = np.zeros(est_easting.shape,dtype=est_easting.dtype)
  site_northing = np.zeros(est_northing.shape,dtype=est_northing.dtype)
  site_elevation = np.zeros(est_elevation.shape,dtype=est_elevation.dtype)

  for j in range(site_data.shape[0]):
    indexes = np.where(est_siteid == site_data[j,0])
    site_easting[indexes] = site_data[j,1]
    site_northing[indexes] = site_data[j,2]
    site_elevation[indexes] = site_data[j,3]

  # Calculate pulse bearing
  est_bearing = np.arctan2(est_easting - site_easting, 
                           est_northing - site_northing)*180/np.pi
  est_bearing += 360*(est_bearing<0)
  est_2d_distance = np.sqrt((est_easting - site_easting)**2 + (est_northing - site_northing)**2)
  est_3d_distance = np.sqrt((est_easting - site_easting)**2 + (est_northing - site_northing)**2 + (est_elevation - site_elevation)**2)
  est_elevation_angle = np.arctan2((est_elevation - site_elevation),est_2d_distance)*180/np.pi


  # Insert into databse. 
  cur.executemany('''INSERT INTO true_position 
                            (estID, easting, northing, elevation, 2d_distance, 3d_distance, bearing, elevation_angle) 
                     VALUES (%s, %s, %s, %s, %s, %s, %s, %s)''', 
         [ (est_ID[j], est_easting[j], 
            est_northing[j], est_elevation[j], est_2d_distance[j], est_3d_distance[j], est_bearing[j], est_elevation_angle[j]) for j in range(ct) ])


print "true_position: finished in {0:.2f} seconds.".format(time.time() - start)
