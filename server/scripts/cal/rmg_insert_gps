#!/usr/bin/env python2
# rmg_insert_gps
# Insert GPS data for a calibration run into the database. Outputs to
# qraat.GPS_Calibration_Data. This program is part of QRAAT, an 
# utomated animal tracking system based on GNU Radio. 
#
# Copyright (C) 2013 Todd Borrowman, Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import qraat.srv
import utm
import time, os, sys
from argparse import ArgumentParser

program_description = '''\
Insert GPS information into the database. The data is interpolated 
with the pulses produced during a calibration run to produce steering 
vectors for the direction finding algorithm. This program is part of
QRAAT, an automated animal tracking system based on GNU Radio.   
'''

parser = ArgumentParser(description=program_description)

parser.add_argument('gpx_file', type=str,
                  help="GPS data in gpx format, typically with extension `.gpx`.")

parser.add_argument('dep_id', type=int,
                  help="Deployment ID, the serial identifier in the database "
                       "context identifying a calibration run.")

options = parser.parse_args()

start = time.time()
print "insert_gps: start time:", time.asctime(time.localtime(start))

# Connect to database. 
db_con = qraat.srv.util.get_db('writer')



cur = db_con.cursor()
  
# Establish validity of dep_id choice. 
if not cur.execute("SELECT (1) FROM deployment WHERE ID=%s limit 1", options.dep_id):
  print >>sys.stderr, "insert_gps: error: specified deployment not in the databse."
  sys.exit(1)

# Check for GPS data for that deployment
if cur.execute("SELECT (1) FROM gps_data WHERE deploymentID=%s limit 1", options.dep_id):
  print >>sys.stderr, ("insert_gps: warning: database already contains GPS data for the "
                         "specified cal run. Would you like to replace it? [y,n,a(=append)] "), 
  ans = raw_input().strip()
  if ans in ['y', 'Y', 'yes', 'YES']: 
    cur.execute("DELETE FROM gps_data WHERE deploymentID = %s",options.dep_id)
  elif ans in ['a', 'A', 'append', 'APPEND', 'Append']:
    pass
  else:
    print >>sys.stderr, "insert_gps: exiting."
    sys.exit(0)
  
# Import gpx data. 
try:
  gps = qraat.srv.gps.gps(options.gpx_file)
except IOError, e: 
  print >>sys.stderr, "insert_gps: error: specified GPX file '%s' doesn't exists.".format(options.gpx_file)
  sys.exit(1)
  
# Insert gps data into database. 
# NOTE lose precision here. 
cur.executemany('''INSERT INTO gps_data 
                                (deploymentID, timestamp, latitude, 
                                 longitude, elevation, 
                                 easting, northing, utm_zone_number, utm_zone_letter) 
                         VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s) ;''', 
    [ ( options.dep_id, gps.time[j], gps.latitude[j], 
        gps.longitude[j], gps.elevation[j], 
        gps.easting[j], gps.northing[j], 
        gps.zone[j], utm.from_latlon(gps.latitude[j],gps.longitude[j])[3] ) 
      for j in range(gps.num_records) ]
  )

print "insert_gps: finished in %.2f seconds." % (time.time() - start)
