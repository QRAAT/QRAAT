#!/usr/bin/env python
# active_rmg 
# Visualization of activity data. This simple program collects output
# from the running RMG module and displays statistical infomration
# about the pulses. This information is used as a proxy to determine
# the "activity levels" of targets, based on SNR. This file is part of 
# QRAAT, an automated animal tracking system based on GNU Radio. 
#
# Copyright (C) 2012 Todd Borrowman, Christopher Patton
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import wxversion
wxversion.select("2.8")
import wx, wx.html

from gnuradio import gr, blks2, uhd, gru
from optparse import OptionParser
from numpy import mean, std
import rmg, csv
import os, sys, signal, time
import collections


  ## Parse RMG Options ## 

parser = OptionParser ()
parser.add_option ("-f", "--tx_file", type="string", default="tx.csv", help="csv file with transmitter info ")
parser.add_option ("-t", "--time", type="int", default=6, help="time in seconds to look at each frequency")
parser.add_option ("-p", "--port", type="string", default="/dev/ttyS0", help="serial port for communication to RMG PIC")
parser.add_option ("-n", "--no_usrp", action="store_true", dest="NO_USRP", default=False, help="use null_source instead of USRP")
parser.add_option ("-d", "--directory", type="string", default="/ramdisk/det_files", help="directory to save .det files")
parser.add_option ("-b", "--bands", type="int", default=32, help="number of bands to use")
(options, args) = parser.parse_args()
if len(args) != 0:
  parser.print_help()
  raise SystemExit
 



  ## Main window ##

aboutText = """<p>This program parses the output of the RMG pulse detector and 
displays activity information. The mean and standard deviation of the SNR is 
calculated from the last 1000 pulses on each frequency. 
Version %(wxpy)s of <b>wxPython</b> and %(python)s of <b>Python</b>.
<p>Written by Christopher Patton for the QRAAT project."""

class HtmlWindow(wx.html.HtmlWindow):
    def __init__(self, parent, id, size=(600,400)):
        wx.html.HtmlWindow.__init__(self,parent, id, size=size)
        if "gtk2" in wx.PlatformInfo:
            self.SetStandardFonts()

    def OnLinkClicked(self, link):
        wx.LaunchDefaultBrowser(link.GetHref())

class AboutBox(wx.Dialog):
    def __init__(self):
        wx.Dialog.__init__(self, None, -1, "About Active RMG",
            style=wx.DEFAULT_DIALOG_STYLE|wx.THICK_FRAME|wx.RESIZE_BORDER|
                wx.TAB_TRAVERSAL)
        hwin = HtmlWindow(self, -1, size=(400,200))
        vers = {}
        vers["python"] = sys.version.split()[0]
        vers["wxpy"] = wx.VERSION_STRING
        hwin.SetPage(aboutText % vers)
        btn = hwin.FindWindowById(wx.ID_OK)
        irep = hwin.GetInternalRepresentation()
        hwin.SetSize((irep.GetWidth()+25, irep.GetHeight()+10))
        self.SetClientSize(hwin.GetSize())
        self.CentreOnParent(wx.BOTH)
        self.SetFocus()

class Frame(wx.Frame):
    def __init__(self, title, rmg_pid):
        # get transmitter information
        transmitters = []
        inf = open(options.tx_file)
        txs = csv.reader(inf, delimiter = ",", quotechar='"') 
        cols  = txs.next() # first row is header
        index = dict( [(cols[i], i) for i in range(len(cols))] ) 
        for tx in txs:
            if tx[index['use']] in ['Y', 'y', 'yes', 'Yes', 'YES']: 
                tx[index['use']] = True
            else:
                tx[index['use']] = False
            tx[index['freq']] = float(tx[index['freq']])
            tx[index['pulse_width']] = float(tx[index['pulse_width']])
            tx[index['rise_trigger']] = float(tx[index['rise_trigger']])
            tx[index['fall_trigger']] = float(tx[index['fall_trigger']])
            tx[index['filter_alpha']] = float(tx[index['filter_alpha']])
            transmitters.append( tx )
        inf.close()

        # transmitter -> frequency table 
        self.frequency = { j[1]:j[2] for j in transmitters }
        
        # transmitter -> pulses table 
        self.pulses = {}
        for j in transmitters: 
          if j[0]: 
            self.pulses[j[1]] = collections.deque(maxlen=1000) # efficient data strucure
                                                               # kind of like a circular
                                                               # buffer
        
        # kill this process before destroying frame
        self.rmg_pid = rmg_pid
   
        # setup GUI
        wx.Frame.__init__(self, None, title=title, pos=(150,150), size=(350,200))
        self.Bind(wx.EVT_CLOSE, self.OnClose)

        menuBar = wx.MenuBar()
        menu = wx.Menu()
        m_exit = menu.Append(wx.ID_EXIT, "E&xit\tAlt-X", "Close window and exit program.")
        self.Bind(wx.EVT_MENU, self.OnClose, m_exit)
        menuBar.Append(menu, "&File")
        menu = wx.Menu()
        m_about = menu.Append(wx.ID_ABOUT, "&About", "Information about this program")
        self.Bind(wx.EVT_MENU, self.OnAbout, m_about)
        menuBar.Append(menu, "&Help")
        self.SetMenuBar(menuBar)

        self.statusbar = self.CreateStatusBar()

        panel = wx.Panel(self)
        box = wx.BoxSizer(wx.VERTICAL)

        m_text = wx.StaticText(panel, -1, "Active Targets")
        m_text.SetFont(wx.Font(14, wx.SWISS, wx.NORMAL, wx.BOLD))
        m_text.SetSize(m_text.GetBestSize())
        box.Add(m_text, 0, wx.ALL, 10)
        
        # Initialize grid
        self.rows = len(transmitters)
        self.cols = 5

        self.grid = wx.grid.Grid(panel)
        self.grid.CreateGrid(self.rows, self.cols)
        self.grid.SetColLabelValue(0, "Name           ")
        self.grid.SetColLabelValue(1, "Frequency (MHz)")
        self.grid.SetColLabelValue(2, "Last Seen      ")
        self.grid.SetColLabelValue(3, "Mean SNR (dB)")
        self.grid.SetColLabelValue(4, "StD SNR (dB)")
        self.grid.AutoSize()
        for i in range(self.rows):
          for j in range(self.cols): 
            self.grid.SetReadOnly(i, j, True)
          self.grid.SetCellValue(i, 1, str(transmitters[i][2]))
          self.grid.SetCellValue(i, 0, transmitters[i][1])
          self.grid.SetCellValue(i, 3, "--")
          self.grid.SetCellValue(i, 4, "--")
          if transmitters[i][0]:
            self.grid.SetCellValue(i, 2, "Never")
          else:
            self.grid.SetCellValue(i, 2, "Disabled")
            
        box.Add(self.grid, 1, wx.EXPAND, 5)
       
        # Create a timer to process the RMG output and do stats
        # on the SNR every five seconds. 
        self.m_timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.OnRefresh, self.m_timer)
        self.m_timer.Start(5000)

        # Turning on this button will require mutal exclusion on the 'OnRefresh'. 
        # Does wx do this automatically? I imagine it would. TODO
        #m_refresh = wx.Button(panel, wx.ID_ANY, "Refresh")
        #m_refresh.Bind(wx.EVT_BUTTON, self.OnRefresh)
        #box.Add(m_refresh, 0, wx.ALL, 10)

        panel.SetSizer(box)
        panel.Layout()
        
        # signal handler for calculating SNR
        signal.signal(signal.SIGALRM, self.HandleInterrupt)
        

    def HandleInterrupt(self, signum, frame): 
      # interrupt input reading
      raise KeyboardInterrupt
                
    def OnRefresh(self, event):
  
      _newPulses = False

      # Parse RMG output for about a second when "refresh" is clicked
      try: 
        while True:
          signal.alarm(1)
          line = raw_input()
          signal.alarm(0)
          if len(line) > 6 and line[:6] == 'pulse ':
            _newPulses = True
            print "pulse"
            (name, timestamp, noise, snr) = line[6:].split(',')
            timestamp = int(timestamp)
            noise = float(noise)
            snr = float(snr)
            self.pulses[name].append((timestamp, noise, snr))
      except: 
        pass
      
      # Calculate SNR mean and standard deviation
      current = int(time.time())
      for i in range(self.rows):
        guy = self.grid.GetCellValue(i, 0)
        
        try:
          (last_seen, _, _) = self.pulses[guy][-1]
          self.grid.SetCellValue(i, 2, self.lastSeen(last_seen, current))

          snr = [ j[2] for j in self.pulses[guy] ]
          if _newPulses and len(snr) > 0:
            self.grid.SetCellValue(i, 3, "%0.3f" % mean(snr))
            self.grid.SetCellValue(i, 4, "%0.3f" % std(snr))
        except KeyError:
          continue
        except IndexError:
          continue

      self.grid.AutoSizeColumns()
     

    def OnClose(self, event):
      dlg = wx.MessageDialog(self,
          "Close program?",
          "Confirm Exit", wx.OK|wx.CANCEL|wx.ICON_QUESTION)
      result = dlg.ShowModal()
      dlg.Destroy()
      os.kill(self.rmg_pid, signal.SIGINT)
      if result == wx.ID_OK:
        self.Destroy()

    def OnAbout(self, event):
      dlg = AboutBox()
      dlg.ShowModal()
      dlg.Destroy()

    def lastSeen(self, a, b):
      # Return a string representation of the time passed.
      seconds = b - a
      minutes = seconds / 60
      hours   = minutes / 60
      days    = hours / 24

      if days > 0: 
        return time.ctime(a)
      elif hours == 1:
        return "1 hour %d min ago" % (minutes % 60)
      elif hours > 1:
        return "%d hours %d min ago" % (hours, minutes % 60)
      elif minutes == 1:
        return "1 minute %d sec ago" % (seconds % 60)
      elif minutes > 1:
        return "%d minutes %d sec ago" % (minutes, seconds % 60)
      elif seconds < 2: 
        return "just now"
      else:
        return "%d seconds ago" % seconds



  ## Run the RMG module like normal ##

def producer( ):

  # dir_finder should only be in one running process. Otherwise 
  # the data structure gets locked up. (NOTE that del dir_finder
  # didn't work) 

  dir_finder = rmg.rmg_run.detector_array(options.tx_file,
                                          options.directory,
                                          options.bands,
                                          options.port,
                                          options.NO_USRP)
  
  dir_finder.run(options.time)



  ## Main. Fork a process for running RMG (producer) ##

stdin =  sys.stdin.fileno()
stdout = sys.stdout.fileno()

x, y  = os.pipe() 
pid = os.fork()
if pid: # parent process
    os.close(y)
    os.dup2(x, stdin)
    try:
      app = wx.App(redirect=False)   # Error messages go to popup window
      top = Frame("Active RMG", pid)
      top.Show()
      app.MainLoop()
    finally: # In case the window crashes, kill running RMG
      os.kill(pid, signal.SIGINT)

else: # child process
    os.close(x)
    os.dup2(y, stdout)
    producer( )


     

