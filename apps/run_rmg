#!/usr/bin/env python
# run_rmg
# Adhoc method for running the RMG module. Outputs pulse data as .det files. 
# (See documentaiton for file format and details.) This file is part of QRAAT, 
# an automated animal tracking system based on GNU Radio. 
#
# Copyright (C) 2012 Todd Borrowman
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from gnuradio import gr, blks2, uhd, gru
import rmg
from optparse import OptionParser

parser = OptionParser ()
parser.add_option ("-f", "--tx_file", type="string", 
	                   default="tx.csv", 
			   help="csv file with transmitter info ")
parser.add_option ("-t", "--time", type="int",
                           default=6,
                           help="time in seconds to look at each frequency")
parser.add_option ("-p", "--port", type="string",
                           default="/dev/ttyS0",
                           help="serial port for communication to RMG PIC")
parser.add_option ("-n", "--no_usrp", action="store_true", dest="NO_USRP",
                           default=False,
                           help="use null_source instead of USRP")
parser.add_option ("-d", "--directory", type="string",
                           default="det/",
                           help="directory to save .det files")
parser.add_option ("-b", "--bands", type="int",
                           default=32,
                           help="number of bands to use")

(options, args) = parser.parse_args()

if len(args) != 0:
    parser.print_help()
    raise SystemExit

dir_finder = rmg.rmg_run.detector_array(options.tx_file,
                                        options.directory,
                                        options.bands,
                                        options.port,
                                        options.NO_USRP)
dir_finder.run(options.time)

